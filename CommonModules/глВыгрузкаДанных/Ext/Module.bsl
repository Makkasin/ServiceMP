&НаСервере
Функция ЗаписатьХранилищеВСтроку(Тбл,ТекДт=Неопределено)
	
	Если ТекДт = Неопределено Тогда
		ТекДТ = ТекущаяДата();
	КонецЕСЛИ;
	
	Стк = Новый структура();
	Для а=1 по ТБл.Колонки.Количество() Цикл
		Кол = ТБл.Колонки[а-1];
		
		Если Найти(Кол.Имя,"GUID") <> 0 Тогда
			п = Кол.Имя;
			Кол.Имя = п+"1";
			ТБл.Колонки.Добавить(п,Новый ОписаниеТипов("Строка"));
			Стк.Вставить(п+"1",п);
		КонецЕСЛИ;
		
	КонеццИклА;
	
	Если Стк.Количество()<>0 Тогда
		Для каждого Стр из ТБл Цикл
			Для каждого эл из Стк Цикл
				Стр[эл.Значение] = Стр[эл.Ключ].УникальныйИдентификатор();
			Конеццикла;
		КонецЦикла;
	КонецЕсли;
	
	
	
	//Мас = Новый МАссив;
	//Мас.Добавить(ТекДТ);
	//МАс.ДОбавить(ТБл);
	
	хр = Новый ХранилищеЗначения(ТБл,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции
			
&НаСервере
Процедура ЗагрузитьНоменклатуруАлга(Метод,Орг=Неопределено,ДтИзм = Неопределено,АдресХранилища=Неопределено,НеВФоне=ЛОжь) экспорт
	
	
		СткСоединение = глОбщий.СткПолучитьСоединение(Орг);
		
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	Если Орг = Неопределено ТОгда
		Апи = "Urals_BUH";
	ИНаче
		Апи = Орг.APIrest;
	КонецеСЛИ;
	
	ТекстЗапроса = "/"+Апи+"/hs/invAPI/"+Метод+"?ksPar=1";
	Если  ДтИзм<>Неопределено Тогда
		 ТекстЗапроса = ТекстЗапроса + "&izmDt="+Формат(ДтИзм-600,"ДФ=yyyyMMddHHmmss");
	 КонецЕСЛИ;
	
	//Запрос = Новый HTTPЗапрос("/buh/hs/invAPI/refskl");
	
	Запрос = Новый HTTPЗапрос(ТекстЗапроса);
 
    // Получаем текст корневой страницы через GET-запрос.
	//Если ВремСкл<>Неопределено Тогда
	//ИначеЕсли ДтИзм=Неопределено Тогда
	//	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ref");
	//ИНаче
	//	Запрос = Новый HTTPЗапрос("/Urals_BUH/hs/invAPI/ref?izmDt="+Формат(ДтИзм-60,"ДФ=yyyyMMddHHmmss"));
	//КонецЕСЛИ;
    // Если бы нужна была другая страница, мы бы указали,
    // например, "/about" или "/news".
 
    Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
 
    //Сообщить("Нам вернули код: " + Результат.КодСостояния);
    // Что примерно означают коды результата запроса:
    // [100, 299] - хороший код возврата
    // [300, 399] - нас перенаправляют на другую страницу,
    //              причём 302 - код постоянного перенаправления
    // [400, 499] - ошибка запроса
    // [500, 599] - ошибка сервера
 
    // в теле результата запроса - текст обычной html страницы
	//Сообщить("Тело результата: " + Результат.ПолучитьТелоКакСтроку()); 
	
	
	
	
	 дтЗагрИзм=Неопределено;
	 Если ПрочитатьОтветОбк(Результат.ПолучитьТелоКакСтроку(),дтЗагрИзм,АдресХранилища,НеВФоне) <> Истина Тогда
		 Сообщить("Ошибка загрузки!");
		 Возврат;
	 КонецЕСЛИ;
	 
	
КонецПроцедуры

&НаСервере
Функция ПрочитатьОтветОбк(ТелоСтр,дтИзм,АдресВременногоХранилища=Неопределено,НеВФоне=ЛОжь)  Экспорт
	
	
	Мас   = XMLзначение(Тип("ХранилищеЗначения"),ТелоСтр).Получить();
	дтИзм = Мас[0];
	Тбл   = Мас[1];
	
	Тбл.Колонки.Добавить("Инд",Новый ОписаниеТипов("Число"));
	Тбл.Колонки.Добавить("ИндНов",Новый ОписаниеТипов("Число"));
	Тбл.ЗаполнитьЗначения(1,"Инд");
	
		
		СткКол = Новый Структура();
		Для каждого Кол из Тбл.Колонки Цикл
			СткКол.Вставить(Кол.имя,"");
		Конеццикла;
		
		Для каждого Стр из тбл Цикл
			ЗаписатьОбк(стр,СткКол);
		Конеццикла;
		
		Тхт = "Загружено "+Тбл.Количество()+" объектов";
		ТБл.свернуть("ВидСпр","Инд,ИНднов");
		Для каждого Стр из Тбл Цикл
			Тхт = Тхт+Символы.ПС+" "+Стр.видСпр+" = "+Стр.инд+" в т.ч. новых = "+Стр.индНов;
		КонецЦикла;
		
		Сообщить(тхт);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЗаписатьОбк(Стр,СткКол,МасОбкНеНайден=Неопределено) экспорт
	
	сс = Справочники[Стр.ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.GUID));
	Если Найти(сокрЛП(сс),"не найден")<>0 Тогда
		Если Стр.ЭтоГруппа=true Тогда
			Обк = справочники[Стр.ВидСпр].СоздатьГруппу();
		ИНаче
			Обк = справочники[Стр.ВидСпр].СоздатьЭлемент();
		КонецесЛИ;
		Обк.УстановитьСсылкуНового(сс);
		
	Иначе
		обк = сс.ПолучитьОбъект();
	КонецЕСЛИ;
	
	
	Если Обк.ЭтоГРуппа=true Тогда
		ЗаполнитьЗначенияСвойств(Обк,Стр,"Наименование,Код");
	ИНаче
		ЗаполнитьЗначенияСвойств(Обк,Стр);
		Мета = Обк.Метаданные().Реквизиты;
		
		Для каждого КлЗн из СткКол Цикл
			Если Найти(клЗн.ключ,"GUID")=0 Тогда Продолжить; КонецеСЛИ;
			Рек = СокрЛП(СтрЗаменить(клЗн.ключ,"GUID",""));
			Если Рек = "" Тогда Продолжить; КонецЕСЛИ;
			Если Мета.Найти(Рек)=Неопределено ТОгда Продолжить; КонецеСЛИ;
			
			п=XMLТипЗнч(Обк[Рек]).TypeName; 
			пТипСпр = Сред(п,Найти(п,".")+1);
			Гуид = Новый УникальныйИдентификатор(Стр[клЗн.ключ]);
			
			Обк[Рек] = Справочники[пТипСпр].ПолучитьСсылку(ГУИД);
		Конеццикла;
		
		Если Стр.ВидСпр = "Склады" Тогда
			Обк.Организация = Справочники.Организации.НайтиПоКоду(Стр.ОрганизацияINN);
		КонецЕсли;
	КонецЕСЛИ;
	
	Обк.ОбменДанными.Загрузка = Истина;
	//Обк.ДатаИзменения = Дата(1,1,1);
	//Обк.ДатаСинхронизации = Дата(1,1,1);
	Попытка
		Обк.Записать();
	Исключение
		Возврат Ложь;
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
	Если СткКол.Свойство("ПометкаУдаления") Тогда
		Если Стр.ПометкаУдаления <> Обк.ПометкаУдаления Тогда
			Обк.установитьПометкуУдаления(Стр.ПометкаУдаления);
		КонецЕСЛИ;
	КонецЕСЛИ;
	
	Возврат Истина;
	
КонецФункции

Функция ДанныеОРГ() Экспорт
	
	ТекстЗапроса = "
	|SELECT
	|  orgId, 
	|  Code,
	|  Descr,
	|  extIp,
	|  extIpENT,
	|  codeRegion,
	|  intIpENT,
	|  intIP,
	|  apiRest,
	|  apiRestENT,
	|  ShortName
	|FROM SVOD.dbo.org
	|
	|";
	
	
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	ТБл = Новый ТаблицаЗначений;   	                            
	ТБл.Колонки.Добавить("ВидСпр");
	ТБл.Колонки.Добавить("GUID");
	Тбл.Колонки.Добавить("Наименование");
	Тбл.Колонки.Добавить("РодительGUID");
	Тбл.Колонки.Добавить("ЭтоГруппа");
	Тбл.Колонки.Добавить("Код");
	Тбл.Колонки.Добавить("КодРегиона");
	Тбл.Колонки.Добавить("ВнешнийАдрес");
	Тбл.Колонки.Добавить("ВнешнийАдресENT");
	Тбл.Колонки.Добавить("ВнутреннийАдресENT");
	Тбл.Колонки.Добавить("ВнутреннийАдрес");
	Тбл.Колонки.Добавить("APIrest");
	Тбл.Колонки.Добавить("APIrestENT");
	Тбл.Колонки.Добавить("ShortName");
	
	Пока Записи.EOF() = 0 Цикл 
		НовСтр = ТБл.Добавить();
		НовСтр.ВидСпр 			 = "Организации";
		НовСтр.ЭтоГруппа 		 = Ложь;
		Гуид = Новый УникальныйИдентификатор(Сокрлп(Записи.Fields("orgId").Value));
		НовСтр.GUID         	 = Справочники.Организации.ПолучитьСсылку(Гуид);
		НовСтр.РодительGUID   	 = Справочники.Организации.ПустаяСсылка();
		НовСтр.Код          	 = Сокрлп(Записи.Fields("Code").Value);
		НовСтр.КодРегиона		 = Сокрлп(Записи.Fields("codeRegion").Value);
		НовСтр.Наименование 	 = Сокрлп(Записи.Fields("Descr").Value);
		НовСтр.ВнешнийАдрес 	 = Сокрлп(Записи.Fields("extIp").Value);
		НовСтр.ВнешнийАдресENT 	 = Сокрлп(Записи.Fields("extIpENT").Value);
		НовСтр.ВнутреннийАдресENT= Сокрлп(Записи.Fields("intIpENT").Value);
		НовСтр.ВнутреннийАдрес   = Сокрлп(Записи.Fields("intIP").Value);
		НовСтр.APIrest  		 = Сокрлп(Записи.Fields("apiRest").Value);
		НовСтр.APIrestENT  		 = Сокрлп(Записи.Fields("apiRestENT").Value);
		НовСтр.ShortName  		 = Сокрлп(Записи.Fields("ShortName").Value);
		
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	Возврат Тбл;
	
	//ТекДт = ТекущаяДата();
	//Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт);
	
КонецФункции

Функция ОтправитьMSG_GOOGLE(СткПар) Экспорт
	
	КодСостояния = 310;
	
	Мас = Новый Массив;
	Для каждого Эл из СткПар.Получатели Цикл
		//Мас.Добавить(Эл.ИдентификаторУстройства);
		Мас.Добавить(эл);
	КонецЦикла;
	
	
	КлючСервера = "AIzaSyAA8UrUri-3xQ5ipsHOIt2cUvYLIMKkv2Q";
        
    АдресСервера = "fcm.googleapis.com/fcm/send";
        
    ssl = Новый ЗащищенноеСоединениеOpenSSL();
    Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
        
    ТелоСообщения = Новый Структура;
    ТелоСообщения.Вставить("title", СткПар.Заголовок);
    ТелоСообщения.Вставить("name", СткПар.Тема);
    ТелоСообщения.Вставить("text", СткПар.Текст);
        
    ПараметрыСообщения = Новый Структура;                          
    ПараметрыСообщения.Вставить("registration_ids", Мас);  
    ПараметрыСообщения.Вставить("data", ТелоСообщения);
        
    ЗаписьJSON = Новый ЗаписьJSON;
    ЗаписьJSON.УстановитьСтроку();
    ЗаписатьJSON(ЗаписьJSON, ПараметрыСообщения);
        
    СтрокаТелоЗапроса = ЗаписьJSON.Закрыть();
        
    Запрос = Новый HTTPЗапрос();
    Запрос.Заголовки.Вставить("Content-Type", "application/json");
    Запрос.Заголовки.Вставить("Authorization", "key="+КлючСервера);
    Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, КодировкаТекста.UTF8);
        
    Ответ = Соединение.ОтправитьДляОбработки(Запрос); 
	
	 Возврат Ответ;
	
КонецФункции

Процедура ОбработкаПринятыхСообщенийВФоне(ссЗапросViber) Экспорт
	Справочники.ЗапросыViber.ОбрабратботкаПринятогоСообщения(ссЗапросViber);
КонецПроцедуры

#Область КадровыеДанные


Функция ПолучитьКадрТбл(Адрес,порт,База) Экспорт
	
	СтруктураПараметров = Новый Структура; // Все параметры необязательные, но если не задать ИНН организации ==> ответ пустой
	
	//СтруктураПараметров.Вставить("ИННОрганизации",ИНН); 
	
	// Работавшие за период:
	СтруктураПараметров.Вставить("НачПериода",ТекущаяДата());
	СтруктураПараметров.Вставить("КонПериода",ТекущаяДата()); // срез данных всегда ведётся на КонПериода
	
	//СтруктураПараметров.Вставить("Категории","Водители и механизаторы");
	//СтруктураПараметров.Вставить("Категории","Руководители, Специалисты"); // можно через запятую
	
	// пример отбора подразделений: по ООО "МТС"
	//СтруктураПараметров.Вставить("Подразделения","98a27124-fd8b-11e6-ad6d-d89d67273fdc");					// Автоколонна (Приобское, Кондинское м/р)
	//МассивПодразделений = Новый Массив;
	//МассивПодразделений.Добавить("c47a71e6-fd97-11e6-ad6d-d89d67273fdc");									// ... Колонна Приобское м-е
	//МассивПодразделений.Добавить(Новый УникальныйИдентификатор("beefe29f-0f8c-11e7-b8e8-d89d67273fdc"));	// ... ОП ИТР Приобское м/р
	//СтруктураПараметров.Вставить("Подразделения",МассивПодразделений);
	
	//СтруктураПараметров.Вставить("ПодразделенияВИерархии",Истина);
	
	// Ложь - в ответе будут колонки "ПериодСостояния" и "Состояние"
	// Истина - в ответе будут колонки "Начало", "Окончание" и "Состояние"
	// "Состояние" и даты заполнены только если есть отклонения
	СтруктураПараметров.Вставить("ПолучатьПериодСостояний",Истина);

	Соединение1С82 = Новый HTTPСоединение(Адрес, порт,"provider" ,"" );
	
	Body = XMLСтрока(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(-1)));
	
	//Запрос = Новый HTTPЗапрос("/hrmu/hs/zupAPI/GETRABSOTR");
	Запрос = Новый HTTPЗапрос("/"+База+"/hs/zupAPI/GETRABSOTR");
	
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Запрос.УстановитьТелоИзСтроки(Body);
	Ответ = Соединение1С82.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	Body = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = "200" или КодСостояния = 200 Тогда
		Попытка
			ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),Body);
			Результат = ХЗ.Получить();
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	Иначе
		Сообщить("Код состояния = "+КодСостояния+" ... "+Body);
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

Функция фрмСтр(Стр)
	п = СтрЗаменить(Стр,"'","");
	Возврат СокрЛП(п);
КонецФункции

Функция фрмТолькоЧисла(Стр)
	
	Рез="";
	Для а=1 по СтрДлина(Стр) Цикл
		п = Сред(Стр,а,1);
		Если Найти("1234567890",п)<>0 Тогда
			Рез=Рез + п;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция ФрмЧсл(Зн)
	Если СокрлП(Зн)="" или зн = 0 ТОгда
		Возврат "0";
	ИНАче
		Возврат Формат(Зн,"ЧРД=.; ЧН=0; ЧГ=0");
	КонецЕСЛИ;
КонецФункции

Процедура ЗаписатьВSQL(иннОрг,Тбл)

	//---
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();	
	
	
	ИмяБазы = "employees";
	
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE CodeOrg = N'"+иннОрг+"' ");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
	ном = 1;
	
	дт1 = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss.000")+"',126)";
	
	Для а=1 по ТБл.Количество() Цикл
		Стр = ТБл[а-1];
		
		паспорт  = фрмТолькоЧисла(""+Стр.ДокументСерия+Стр.ДокументНомер);
		Сос = стр.Состояние;
		Если Сос<>"" Тогда
			Если Стр.НАчало <> Дата(1,1,1) Тогда
				Сос = Сос + " с "+Формат(Стр.Начало,"ДФ=dd.MM.yyyy");
			КонецЕСЛИ;
			Если Стр.Окончание <> Дата(1,1,1) Тогда
				Сос = Сос + " по "+Формат(Стр.Окончание,"ДФ=dd.MM.yyyy");
			КонецЕСЛИ;
		КонецЕслИ;
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+иннОрг+"', 
		|N'"+фрмСтр(стр.Организация)+"', 
		|N'"+СокрлП(Стр.Физлицо)+"', 
		|N'"+фрмСтр(стр.ФИО)+"', 
		|N'"+фрмСтр(стр.ПодразделениеОрганизации)+"', 
		|N'"+фрмСтр(стр.Должность)+"', 
		|N'"+фрмСтр(стр.Категория)+"', 
		|CONVERT(DateTime,'"+Формат(Стр.ДатаРождения,"ДФ=yyyyMMdd")+"',104) ,
		|CONVERT(DateTime,'"+Формат(Стр.ДатаПриема,"ДФ=yyyyMMdd")+"',104) ,
		|CONVERT(DateTime,'"+Формат(Стр.ДатаУвольнения,"ДФ=yyyyMMdd")+"',104) ,
		|N'"+фрмСтр(Сос)+"', 
		|N'"+фрмСтр(нрег(стр.Email))+"', 
		|N'"+фрмСтр("")+"', 
		|N'"+фрмСтр(паспорт)+"', 
		|"+Дт1+"
		|) ";
		
		Если а=ТБл.Количество() или ном = 200 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	
	Сообщить("Синхро [dbo].["+ИмяБазы+"] выпонена ");

	Соединение.Close(); 
	
	
КонецПроцедуры

Процедура ЗагрузитьКадровыеДанные() Экспорт
	//Юралс
	ИНН = "7730675129";
	ТБл = ПолучитьКадрТбл("178.208.254.21",48088,"hrmu");
	Если Тбл<>Неопределено Тогда
		ЗаписатьВSQL(ИНН,Тбл);
	КонецеСЛИ;
	
	//НСТ
	ИНН = "8605016762";
	ТБл = ПолучитьКадрТбл("31.163.203.43",41241,"hrm");
	Если Тбл<>Неопределено Тогда
		ЗаписатьВSQL(ИНН,Тбл);
	КонецеСЛИ;
	
	
КонецПроцедуры

Процедура ЗагрузитьПроектПрозрачность() Экспорт
	
	ДанныеПрозрачность("8906006670");  //МТК
	ДанныеПрозрачность("5636009030");  //ТС
	ДанныеПрозрачность("8603214381");  //МТС
	ДанныеПрозрачность("8605016762");  //НСТ
	ДанныеПрозрачность("8603100867");  //УТТ-Восток
	ДанныеПрозрачность("8603112710");  //ЧАТ
	ДанныеПрозрачность("8603115976");  //НВДС
	ДанныеПрозрачность("8603094317");  //СТ
	
КонецПроцедуры

Процедура ЗагрузитьProduct() Экспорт
	
	Данныеproduct("8906006670");  //МТК
	//Данныеproduct("5636009030");  //ТС
	//Данныеproduct("8603214381");  //МТС
	Данныеproduct("8605016762");  //НСТ
	Данныеproduct("8603100867");  //УТТ-Восток
	Данныеproduct("8603112710");  //ЧАТ
	Данныеproduct("8603115976");  //НВДС
	Данныеproduct("8603239869");  //Югра-сервис
	Данныеproduct("8603094317");  //СТ
	Данныеproduct("7730675129");  //Юрал-кэпитал
	Данныеproduct("8603104188");  //Юрал-кэпитал
	
КонецПроцедуры

Функция ПолучитьДанныеСотрудников(ИНН,Адрес,порт,База,ИмяНТТРСервиса) Экспорт
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ИНН",ИНН);
	
	Соединение1С82 = Новый HTTPСоединение(Адрес,порт,"SERV" ,"SERVgfhjkm");
	Запрос = Новый HTTPЗапрос("/"+База+"/hs/"+ИмяНТТРСервиса+"/GETRABSOTR");
	
	Body = XMLСтрока(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(-1)));
	
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Запрос.УстановитьТелоИзСтроки(Body);
	
	Ответ = Соединение1С82.ОтправитьДляОбработки(Запрос);
	КодСостояния = Ответ.КодСостояния;
	Body = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = "200" или КодСостояния = 200 Тогда
		Попытка
			ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),Body);
			Результат = ХЗ.Получить();
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	Иначе
		Сообщить("Код состояния = "+КодСостояния+" ... "+Body);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьНаимРеглЗаданияПредстоящиеДниРождения() Экспорт
	Возврат "Предстоящие дни рождения";
КонецФункции	

Функция ОтправитьПисьмоОПредстоящихДняхРожденияПоОрганизации(УстановитьОграничениеОтправки,ТЗДанные,ПолучателиДляВсехБаз,ПолучателиДляТекущейБазы,ДнейДоДняРождения)
	// Отберем сотрудников, по которым необходимо отправить инфо о дне рождения
	НаимОрганизации=?(ТЗДанные.Количество()>0,ТЗДанные[0].Организация,"");
	
	НаДату=ТекущаяДата();
	ТекущееВремя=Формат(ТекущаяДата(), "ДЛФ=T");
	Часов=Число(Лев(""+ТекущееВремя,СтрНайти(ТекущееВремя,":")-1));
	ОтправлятьВЧасов=8;
	
	//Для Каждого Колонка Из ТЗДанные.Колонки Цикл
	//	Сообщить("Колонка "+Колонка.Имя);
	//КонецЦикла;
	
	Если УстановитьОграничениеОтправки Тогда
		НадоОтправить=Ложь;
		
		ТекстВыполнения=""+НаимОрганизации;
		
		Если Часов=ОтправлятьВЧасов Тогда
			НадоОтправить=Истина;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ВыполнениеРегламентныхЗаданийСрезПоследних.Период КАК Период,
				|	ВыполнениеРегламентныхЗаданийСрезПоследних.Комментарий КАК Комментарий
				|ИЗ
				|	РегистрСведений.ВыполнениеРегламентныхЗаданий.СрезПоследних(, РеглЗадание = &НаимРеглЗадания) КАК ВыполнениеРегламентныхЗаданийСрезПоследних";
			
			Запрос.УстановитьПараметр("НаимРеглЗадания", ПолучитьНаимРеглЗаданияПредстоящиеДниРождения());
			
			Выборка=Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Если НачалоДня(Выборка.Период)=НачалоДня(ТекущаяДата()) Тогда
					Если СтрНайти(Выборка.Комментарий,"почта отправлена")>0 Тогда
						НадоОтправить=Ложь;
					КонецЕсли;	
				КонецЕсли;	
				
				Если Не НадоОтправить Тогда
					ТекстВыполнения=ТекстВыполнения+" отправлено уже в это дне";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстВыполнения=ТекстВыполнения+" установлено органичение отправки, только в "+ОтправлятьВЧасов+" часов, сейчас "+Часов+" часов";
		КонецЕсли;	
		
		Если Не НадоОтправить Тогда
			Возврат ТекстВыполнения;
		КонецЕсли;	
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗДанные.ФИО КАК ФИО,
		|	ТЗДанные.Должность КАК Должность,
		|	ТЗДанные.ПодразделениеОрганизации КАК Подразделение,
		|	ТЗДанные.Организация КАК Организация,
		|	ТЗДанные.ДатаРождения КАК ДатаРождения
		|ПОМЕСТИТЬ ТЗСотрудники
		|ИЗ
		|	&ТЗДанные КАК ТЗДанные
		|ГДЕ
		|	ТЗДанные.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|	И ТЗДанные.ДатаРождения <> ДАТАВРЕМЯ(1, 1, 1)
		|	И МЕСЯЦ(ТЗДанные.ДатаРождения) = МЕСЯЦ(&НаДату)
		|	И ДЕНЬ(ТЗДанные.ДатаРождения) - ДЕНЬ(&НаДату) = &ДнейДоДняРождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТЗСотрудники.ФИО КАК ФИО,
		|	ТЗСотрудники.ДатаРождения КАК ДатаРождения,
		|	ТЗСотрудники.Должность КАК Должность,
		|	ТЗСотрудники.Подразделение КАК Подразделение,
		|	ТЗСотрудники.Организация КАК Организация,
		|	РАЗНОСТЬДАТ(ТЗСотрудники.ДатаРождения, &НаДату, ГОД) КАК ИсполняетсяЛет
		|ИЗ
		|	ТЗСотрудники КАК ТЗСотрудники";
	
	Запрос.УстановитьПараметр("ДнейДоДняРождения", ДнейДоДняРождения);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	Запрос.УстановитьПараметр("ТЗДанные",ТЗДанные);

	ТЗЗапрос=Запрос.Выполнить().Выгрузить();
	
	Если ТЗЗапрос.Количество()=0 Тогда
		Возврат ""+НаимОрганизации+" сотрудники с ближайшим днем рождения не найдены.";
	Иначе
		ТабДок=Новый ТабличныйДокумент;
		
		Макет=ПолучитьОбщийМакет("ДанныеПоДнямРождения");
		
		ОбластьШапка=Макет.ПолучитьОбласть("Шапка");
		
		ПараметрыШапки=Новый Структура;
		ПараметрыШапки.Вставить("НаимОрганизации",НаимОрганизации);
		ПараметрыШапки.Вставить("ДнейДоДняРождения",ДнейДоДняРождения);
		
		ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		
		ТабДок.Вывести(ОбластьШапка);
		
		ОбластьСтрока=Макет.ПолучитьОбласть("Строка");
		
		ПараметрыСтроки=Новый Структура;
		ПараметрыСтроки.Вставить("НомерПП",);
		ПараметрыСтроки.Вставить("ФИО",);
		ПараметрыСтроки.Вставить("Подразделение",);
		ПараметрыСтроки.Вставить("Должность",);
		ПараметрыСтроки.Вставить("ДатаРождения",);
		ПараметрыСтроки.Вставить("ИсполняетсяЛет",);
		
		Для Каждого СтрокаДанных Из ТЗЗапрос Цикл
			ЗаполнитьЗначенияСвойств(ПараметрыСтроки,СтрокаДанных);
			ПараметрыСтроки.НомерПП=ТЗЗапрос.Индекс(СтрокаДанных)+1;
			ПараметрыСтроки.ДатаРождения=Формат(ПараметрыСтроки.ДатаРождения,"ДФ=dd.MM.yyyy");
			
			ОбластьСтрока.Параметры.Заполнить(ПараметрыСтроки);
			ТабДок.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		ИмяФайла=КаталогВременныхФайлов()+"ДанныеПоДнямРождения.HTML";
		
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.HTML);
		
		ТекстПисьма="";
		
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.ОткрытьФайл(ИмяФайла,"UTF-8");
		
		ПостроительDOM = Новый ПостроительDOM;
		ДокументHTML = ПостроительDOM.Прочитать(ЧтениеHTML);
		ЧтениеHTML.Закрыть();

		ЗапиcьHTML = Новый ЗаписьHTML;
		ЗапиcьHTML.УстановитьСтроку();

		ЗаписьDOM = Новый ЗаписьDOM;
		ЗаписьDOM.Записать(ДокументHTML, ЗапиcьHTML);
		
		ТекстПисьма=ЗапиcьHTML.Закрыть();
		
		Получатели=Новый Массив;
		
		Для Каждого Получатель Из ПолучателиДляВсехБаз Цикл
			Получатели.Добавить(Получатель);
		КонецЦикла;
		
		Для Каждого Получатель Из ПолучателиДляТекущейБазы Цикл
			Получатели.Добавить(Получатель);
		КонецЦикла;	
		
		Рез=""+НаимОрганизации;
		Если глПочта.Почта(Получатели,,,"Предстоящие дни рождения",ТекстПисьма) ТОгда
			Рез = РЕз+" почта отправлена!"+Символы.пс;
			КодСостояния = 200;
		Иначе
			Рез = РЕз+" ошибка отправки почты"+Символы.пс;
			КодСостояния = 312;
		КонецеслИ;
		
		Возврат Рез;
	КонецЕсли;
КонецФункции	

Функция ОтправитьПисьмоОПредстоящихДняхРождения(Тест=Ложь,ДнейДоДняРождения=0,УстановитьОграничениеОтправки=Истина) Экспорт
	СтрокаРезультата="";
	
	ПолучателиДляВсехБаз=Новый Массив;
	ПолучателиДляВсехБаз.Добавить("schevkunovoleg@gmail.com");
	Если Не Тест Тогда
		ПолучателиДляВсехБаз.Добавить("543551@mail.ru");
	КонецЕсли;	
	
	// МТК 2.5
	ПолучателиДляТекущейБазы=Новый Массив;
	Если Не Тест Тогда
		ПолучателиДляТекущейБазы.Добавить("petrashovan@mtk-1.ru");
		ПолучателиДляТекущейБазы.Добавить("treninmi@mtk-1.ru");
		ПолучателиДляТекущейБазы.Добавить("pakhtusovagi@mtk-1.ru");
		ПолучателиДляТекущейБазы.Добавить("galayan@mtk-1.ru");
		ПолучателиДляТекущейБазы.Добавить("kornevaon@mtk-1.ru");
	КонецЕсли;	
	
	ТЗДанные=ПолучитьДанныеСотрудников("8906006670","188.17.143.98",47947,"HRM","zupAPI");
	Если ТипЗнч(ТЗДанные)=Тип("ТаблицаЗначений") Тогда
		СтрокаРезультата=СтрокаРезультата+?(СтрокаРезультата="","",Символы.ПС)+ОтправитьПисьмоОПредстоящихДняхРожденияПоОрганизации(УстановитьОграничениеОтправки,ТЗДанные,ПолучателиДляВсехБаз,ПолучателиДляТекущейБазы,ДнейДоДняРождения);
	КонецЕсли;
	
	Возврат СтрокаРезультата;
КонецФункции

Процедура ОтразитьРезультатВыполненияРегламентногоЗадания(РеглЗадание,Комментарий) Экспорт
	МенеджерЗаписи=РегистрыСведений.ВыполнениеРегламентныхЗаданий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период=ТекущаяДата();
	МенеджерЗаписи.РеглЗадание=РеглЗадание;
	МенеджерЗаписи.Комментарий=Комментарий;
	МенеджерЗаписи.Записать();
КонецПроцедуры	

Процедура ЗагрузкаДанныхИзДО() Экспорт
	Попытка
		КомментарийВыполнения=ОтправитьПисьмоОПредстоящихДняхРождения();
	Исключение
		КомментарийВыполнения="Ошибка выполнения: "+ОписаниеОшибки();
	КонецПопытки;
	
	ОтразитьРезультатВыполненияРегламентногоЗадания(ПолучитьНаимРеглЗаданияПредстоящиеДниРождения(),КомментарийВыполнения);
	
	ЗагрузитьProduct();
	
	
	Попытка
		ЗагрузитьПроектПрозрачность();
		ЗагрузитьКадровыеДанные();
		
		КомментарийВыполнения="Выполнено";
	Исключение
		КомментарийВыполнения="Ошибка выполнения: "+ОписаниеОшибки();
	КонецПопытки;
	
	ОтразитьРезультатВыполненияРегламентногоЗадания("Загрузка кадровых данных",КомментарийВыполнения);
КонецПроцедуры

#КонецОбласти      

#Область Прозрачность

Функция ПолучитьПрозрачностьТбл(ИНН,ИмяОрг) 
	
	ТБл = глВыгрузкаДанных.ДанныеОРГ();
	нс= ТБл.Найти(инн,"код");
	Если нс = Неопределено ТОгда Возврат Неопределено; КонецеСлИ;
	
	ИмяОрг = нс.Наименование;
	Если СокрЛП(нс.ВнешнийАдресENT)="" Тогда
		Адрес = нс.ВнешнийАдрес;
	ИНАче
		Адрес = нс.ВнешнийАдресENT;
	КонецЕСЛИ;
	порт = 80;
	п = Найти(Адрес,":");
	Если п<>0 Тогда
		пСтр = СтрЗаменить(Адрес,":",Символы.ПС);
		Адрес = СокрлП(СТрПолучитьСтроку(пСтр,1));
		порт = Число(фрмТолькоЧисла(СТрПолучитьСтроку(пСтр,2)));
	КонецеСЛИ;
	База = нс.apiRestENT;	
	
	Соединение1С82 = Новый HTTPСоединение(Адрес, порт,"SERV" ,"SERVgfhjkm" );
	
	
	Запрос = Новый HTTPЗапрос("/"+База+"/hs/entAPI/GETPROZR");
	
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Попытка
		Ответ = Соединение1С82.GET(Запрос);
	исключение
		Возврат ""+ОписаниеОшибки();
	КонецПопытки;
	КодСостояния = Ответ.КодСостояния;
	Body = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = "200" или КодСостояния = 200 Тогда
		Попытка
			ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),Body);
			Результат = ХЗ.Получить();
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	Иначе
		Сообщить("Код состояния = "+КодСостояния+" ... "+Body);
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

Процедура ЗаписатьВSQLПрозрачность(иннОрг,Организация,Тбл)

	//---
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();	
	
	
	ИмяБазы = "Prozrachnost";
	
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE CodeOrg = N'"+иннОрг+"' ");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
	ном = 1;
	
	дт1 = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss.000")+"',126)";
	
	Для а=1 по ТБл.Количество() Цикл
		Стр = ТБл[а-1];
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+иннОрг+"', 
		|N'"+фрмСтр(Организация)+"', 
		|N'"+фрмСтр(Стр.ТС)+"', 
		|N'"+фрмСтр(стр.ГаражныйНомер)+"', 
		|N'"+СтрЗаменить(глОбщий.ЗаменаСимволов(ВРег(фрмСтр(стр.ГосударственныйНомер)),"ABCEHKMOPTXY","АВСЕНКМОРТХУ"), " ", "")+"', 
		|"+ФрмЧсл(Стр.фото)+", 
		|"+ФрмЧсл(Стр.ПТС)+", 
		|"+ФрмЧсл(Стр.СТС)+", 
		|"+ФрмЧсл(Стр.Готово)+", 
		|"+ФрмЧсл(Стр.НеГотово)+", 
		|"+ФрмЧсл(Стр.Всего)+", 
		|"+Дт1+",
		|N'"+фрмСтр(Стр.Состояние)+"'
		|) ";
		
		Если а=ТБл.Количество() или ном = 200 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	
	Сообщить("Синхро [dbo].["+ИмяБазы+"] выпонена ");

	Соединение.Close(); 
	
	
КонецПроцедуры

Процедура ДанныеПрозрачность(ИНН) Экспорт
	имяОрг = "";
	Тбл = ПолучитьПрозрачностьТбл(инн,ИмяОрг);
	Если Тбл = Неопределено ТОгда
		Сообщить("Ошибка загрузки ИНН Прозрачность");
		Возврат;
	КонецЕСЛИ;
	
	ТБл.Колонки.Добавить("НеГотово");
	ТБл.Колонки.Добавить("Готово");
	ТБл.Колонки.Добавить("Всего");
	ТБл.Колонки.Добавить("Состояние");
	ТБл.ЗаполнитьЗначения(1,"Всего");
	Для каждого Стр из Тбл Цикл
		Если Стр.Фото = 1 и Стр.ПТС = 1 и Стр.стс = 1 Тогда
			Стр.Готово = 1;
			Стр.Состояние = "Готово";
		ИНаче
			Стр.Готово = 0;
			Стр.Состояние = "Не готово";
		КонецеСЛИ;
		Стр.НеГотово = 1 - Стр.Готово;
	КонецЦикла;
	
	
	ЗаписатьВSQLПрозрачность(инн,имяОрг,Тбл);
КонецПроцедуры

#КонецОбласти

#Область Product
Функция Получитьproduct(ИНН,ИмяОрг,метод) 
	
	ТБл = глВыгрузкаДанных.ДанныеОРГ();
	нс= ТБл.Найти(инн,"код");
	Если нс = Неопределено ТОгда Возврат Неопределено; КонецеСлИ;
	
	База   = нс.apiRest;	
	ИмяОрг = нс.Наименование;
	Адрес  = нс.ВнешнийАдрес;
	порт   = 80;
	п = Найти(Адрес,":");
	Если п<>0 Тогда
		пСтр = СтрЗаменить(Адрес,":",Символы.ПС);
		Адрес = СокрлП(СТрПолучитьСтроку(пСтр,1));
		порт = Число(фрмТолькоЧисла(СТрПолучитьСтроку(пСтр,2)));
	КонецеСЛИ;
	
	Соединение1С82 = Новый HTTPСоединение(Адрес, порт,"SERV" ,"SERVgfhjkm" );
	
	
	Запрос = Новый HTTPЗапрос("/"+База+"/hs/invAPI/"+метод);
	
	Запрос.Заголовки.Вставить("Content-Type","text/html; charset=utf-8");
	Попытка
		Ответ = Соединение1С82.GET(Запрос);
	исключение
		Возврат ""+ОписаниеОшибки();
	КонецПопытки;
	КодСостояния = Ответ.КодСостояния;
	Body = Ответ.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = "200" или КодСостояния = 200 Тогда
		Попытка
			ХЗ = XMLЗначение(Тип("ХранилищеЗначения"),Body);
			Результат = ХЗ.Получить()[1];
		Исключение
			Результат = Неопределено;
		КонецПопытки;
	Иначе
		Сообщить("Код состояния = "+КодСостояния+" ... "+Body);
	КонецЕсли;
	
	Возврат Результат;
	
	
КонецФункции

Процедура ЗаписатьВSQLPRODOST(иннОрг,имяОрг,Тбл)

	//---
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();	
	
	
	ИмяБазы = "productBalance21";
	
	Попытка
		Соединение.Execute("DELETE "+ИмяБазы+" WHERE innOrg = N'"+иннОрг+"' ");
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	
	ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
	ном = 1;
	
	дт1 = "CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss.000")+"',126)";
	
	Для а=1 по ТБл.Количество() Цикл
		Стр = ТБл[а-1];
		
		Цена=0;
		Если Стр.Кол<>0 ТОгда
			Цена = ОКР(Стр.СУм/Стр.Кол,2,1);
		КонецЕСЛИ;
		
		
		ТекстЗапроса = ТекстЗапроса + "
		|(N'"+иннОрг+"', 
		|N'"+имяОрг+"', 
		|N'"+СокрлП(Стр.НоменклатураGUID)+"', 
		|N'"+фрмСтр(стр.имяНом)+"', 
		|N'"+фрмСтр(стр.кодНом)+"', 
		|N'"+фрмСтр(стр.Ед)+"', 
		|CONVERT(DateTime,'"+Формат(Стр.Дата,"ДФ=yyyyMMdd")+"',104) ,
		|N'"+фрмСтр(стр.имяСкл)+"', 
		|"+ФрмЧсл(ГОД(Стр.Дата))+",
		|"+ФрмЧсл(Стр.Кол)+",
		|"+ФрмЧсл(Цена)+",
		|"+ФрмЧсл(Стр.Сум)+",
		|"+Дт1+",
		|"+Дт1+"
		|) ";
		
		Если а=ТБл.Количество() или ном = 200 ТОгда
			ТекстЗапроса = ТекстЗапроса+"; ";
			ном = 1;
			Попытка
				Соединение.Execute(ТекстЗапроса);
			Исключение
				Сообщить(ОписаниеОшибки());
				Возврат;
			КонецПопытки;
			ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
		ИНАче
			ТекстЗапроса = ТекстЗапроса+", ";
		КонецЕСЛИ;
		
		ном=ном+1;
		
	КонецЦиклА;
	
	
	Сообщить("Синхро [dbo].["+ИмяБазы+"] выпонена ");

	Соединение.Close(); 
	
	
	
КонецПроцедуры

Процедура Данныеproduct(ИНН) Экспорт
	имяОрг = "";
	
	//OST
	Тбл = Получитьproduct(инн,ИмяОрг,"PRODOST");
	Если Тбл = Неопределено ТОгда
		Сообщить("Ошибка загрузки ИНН PRODOST");
		Возврат;
	КонецЕСЛИ;
	
	ЗаписатьВSQLPRODOST(инн,фрмСтр(имяОрг),Тбл);
	
КонецПроцедуры

#КонецОбласти




Процедура РаботаСОчередью() Экспорт
	РегистрыСведений.ОчередьЕрЛог.ErrorLogНаСервере();
КонецПроцедуры

//-------------
Функция ЗаписатьГараж(Стк) Экспорт
	
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();
	
	ИмяБазы = "Garages";
	ТекстЗапроса  = "INSERT INTO [dbo].["+ИмяБазы+"] VALUES ";
	
	//Попытка
		Соединение.Execute("DELETE [dbo].["+ИмяБазы+"] WHERE sprId = N'"+СокрЛП(Стк.ИД)+"'  ");
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Возврат ОписаниеОшибки();
	//КонецПопытки;
	
	
	
		ТекстЗапроса = ТекстЗапроса +"
		|(N'"+СокрЛП(Стк.ИД)+"', 
		|N'"+СокрЛП(Стк.ИНН)+"', 
		|N'"+СокрЛП(Стк.Наименование)+"', 
		|N'"+Стк.ПометкаУдаления+"', 
		|N'"+СокрЛП(Стк.lat)+"', 
		|N'"+СокрЛП(Стк.lon)+"', 
		|CONVERT(DateTime,'"+Формат(ТекущаяДата(),"ДФ=yyyy-MM-ddTHH:mm:ss.000")+"',126)
		|) ";
		
	//Попытка
		Соединение.Execute(ТекстЗапроса);
	//Исключение
	//	Сообщить(ОписаниеОшибки());
	//	Соединение.Close(); 
	//	Возврат ОписаниеОшибки();
	//КонецПопытки;
	Соединение.Close(); 
	
	return true;
	
КонецФункции

Функция ДанныеГараж() Экспорт
	
	ТекстЗапроса = "
	|SELECT
	|  sprId, 
	|  innOrg,
	|  descr,
	|  delMark,
	|  lat,
	|  lon,
	|  dtSynchro
	|
	|FROM SVOD.dbo.garages
	|
	|";
	
	
	Соединение = глОбщий.ПолучитьСоединениеAZURESQL();
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	
	ТБл = Новый ТаблицаЗначений;   	 
	
	ТБл.Колонки.Добавить("ВидСпр");
	ТБл.Колонки.Добавить("ИД");
	Тбл.Колонки.Добавить("Наименование");
	Тбл.Колонки.Добавить("ЭтоГруппа");
	
	Тбл.Колонки.Добавить("ИНН");
	Тбл.Колонки.Добавить("ПометкаУдаления");
	Тбл.Колонки.Добавить("lat");
	Тбл.Колонки.Добавить("lon");
	Тбл.Колонки.Добавить("ДтСинхро");
	
	Пока Записи.EOF() = 0 Цикл 
		НовСтр = ТБл.Добавить();
		НовСтр.ВидСпр 			= "уатГаражи";
		НовСтр.ЭтоГруппа 		= Ложь;
		Гуид = Новый УникальныйИдентификатор(Сокрлп(Записи.Fields("sprId").Value));
		НовСтр.ИД	         	= Гуид;
		НовСтр.ИНН			 	= Сокрлп(Записи.Fields("innOrg").Value);
		НовСтр.Наименование 	= Сокрлп(Записи.Fields("Descr").Value);
		НовСтр.lat  			= Сокрлп(Записи.Fields("lat").Value);
		НовСтр.lon		  		= Сокрлп(Записи.Fields("lon").Value);
		НовСтр.ДтСинхро  		= Записи.Fields("dtSynchro").Value;
		
		
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	Возврат Тбл;
	
	//ТекДт = ТекущаяДата();
	//Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт);
	
КонецФункции

//----------