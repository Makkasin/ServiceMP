//{"taskId":"d705d314-758a-4c19-b18b-8d97f6b2dc95",
//"registrationTime":"2019-07-19T12:46:56Z",
//"statusChangeTime":"2019-07-19T12:46:56Z",
//"status":"Queued","filesCount":1,"requestStatusDelay":10000}
//test

Функция ПолучитьСоединение()
	
	СткСоединение = Новый Структура();
	
	ssl = Новый ЗащищенноеСоединениеOpenSSL();
	
	Соединение = Новый HTTPСоединение(
	"cloud-eu.ocrsdk.com", // сервер (хост)
	443, // порт, по умолчанию для http используется 80, для https 443
	"ocr1cUrals", // пользователь для доступа к серверу (если он есть)
	"gOuCIMOI+A3Ujeqh6BaOjErq", // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	ssl   // защищенное соединение, если используется https
	);
	
	Возврат  Соединение;
	
КонецФункции


Функция СоздатьЗапрос(Стк,Бин,КодОтвета) Экспорт
	
	Если ТипЗнч(Бин) <> Тип("ДвоичныеДанные") ТОгда
		КодОтвета = "307";
		Возврат "Нет двоичных данных картинки в теле запроса!";
	КонецеслИ;
	
	Зап = РегистрыСведений.ЗапросыРаспознавания.СоздатьМенеджерЗаписи();
	Зап.идЗапроса = СокрЛП(Новый УникальныйИдентификатор());
	Зап.ДатаЗапроса = ТекущаяДата();
	Зап.БинКартинки = Новый ХранилищеЗначения(Бин);
	Зап.Customer = Стк.Customer;
	Зап.Состояние = "Новый запрос";
	Зап.Записать();
	
	Мас = Новый Массив;
	Мас.Добавить(Зап.идЗапроса);
	ФоновыеЗадания.Выполнить("РаботаABBYY.ОтправитьЗапросВABBYY",Мас);
	
	Возврат СокрЛП(Зап.идЗапроса);
	
КонецФункции

Процедура ОтправитьЗапросВABBYY(идЗапроса) Экспорт
	
	Зап = РегистрыСведений.ЗапросыРаспознавания.СоздатьМенеджерЗаписи();
	Зап.идЗапроса = идЗапроса;
	Зап.Прочитать();
	Если Зап.Выбран()=Ложь ТОгда Возврат; КонецеСлИ;
	
	
	ПутьФайлаURL = КодироватьСтроку(идЗапроса,СпособКодированияСтроки.КодировкаURL);
	сткРез = новый Структура("Ошибка,идЗапроса,ОписаниеОшибки",Ложь,"","");

    Соединение = ПолучитьСоединение();
	
	Запрос = Новый HTTPЗапрос("/v2/processImage?language=English,Russian&exportFormat=xlsx&description="+ПутьФайлаURL);
	
	Запрос.УстановитьТелоИзДвоичныхДанных(Зап.БинКартинки.Получить());
	
    Результат = Соединение.ОтправитьДляОбработки(Запрос);
	
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка : код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		СткРез.Ошибка = Истина;
		СткРез.ОписаниеОшибки = "Ошибка : код "+Результат.КодСостояния+символы.ПС+результат.ПолучитьТелоКакСтроку();
		Зап.Результат = результат.ПолучитьТелоКакСтроку();
		Зап.Состояние = "Ошибка";
		Зап.Готово = -1;
		Зап.Записать();
	    Возврат;
	КонецЕСЛИ;
	
	
	чтение = Новый ЧтениеJSON;
	чтение.УстановитьСтроку(результат.ПолучитьТелоКакСтроку());
	Пока чтение.Прочитать() Цикл
		Если чтение.ТипТекущегоЗначения<>ТипЗначенияJSON.ИмяСвойства Тогда Продолжить; КонецЕСЛИ;
		
		Если чтение.ТекущееЗначение	= "taskId" Тогда
			чтение.Прочитать();
			СткРез.идЗапроса = чтение.ТекущееЗначение;
			Зап.IdAbbyy = чтение.ТекущееЗначение;
			Зап.Состояние = "Отправлен в ABBYY";
			Зап.Записать();
			прервать;
		КонецЕСЛИ;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьНеобработанныеЗапросы()
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ TOP 1
	               |	ЗапросыРаспознавания.идЗапроса КАК идЗапроса
	               |ИЗ
	               |	РегистрСведений.ЗапросыРаспознавания КАК ЗапросыРаспознавания
	               |ГДЕ
	               |	ЗапросыРаспознавания.Готово = 0";
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НайтиЗапросИдABBYY(ид)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЗапросыРаспознавания.идЗапроса КАК идЗапроса
	               |ИЗ
	               |	РегистрСведений.ЗапросыРаспознавания КАК ЗапросыРаспознавания
	               |ГДЕ
	               |	ЗапросыРаспознавания.IdAbbyy = &IdAbbyy";
				   Запрос.УстановитьПараметр("IdAbbyy",ид);
				   
	Выб = Запрос.Выполнить().Выбрать();
	Если Выб.Следующий() ТОгда
		Возврат ВЫб.идЗапроса;
	ИНАче
		Возврат "00000000-0000-0000-0000-000000000000";
	КонецЕСЛИ;
	
КонецФункции

Процедура ЗапросРезультатаABBYY() Экспорт
	
	Если ЕстьНеобработанныеЗапросы()=false Тогда Возврат; КонецеСЛИ;
	
	Стк =  ПроверитьГотовностьТбл();
	Если Стк.Ошибка = Истина Тогда
		Сообщить(Стк.ОписаниеОшибки);
		Возврат;
	КонецЕСЛИ;
	
	Для каждого Эл из Стк.сткИД Цикл
		
		элСтк = эл.Значение;
		//КомандаНаСервере("/deleteTask?taskId="+эл.Ключ);
		
		Зап = РегистрыСведений.ЗапросыРаспознавания.СоздатьМенеджерЗаписи();
		Зап.идЗапроса = НайтиЗапросИдABBYY(эл.Ключ);
		Зап.Прочитать();
		Если Зап.Выбран()=Ложь ТОгда 
			Продолжить; 
		КонецеСлИ;
		
		
		Если элСтк.Статус	= "Completed" Тогда 
			Зап.Готово = 1;
			Зап.Состояние = "Готово";
			Зап.АдресURL = элСтк.URL;
		ИНачеЕсли элСтк.Статус	= "ProcessingFailed" Тогда
			Зап.Готово = -1;
			Зап.Состояние = "Ошибка";
			Зап.Результат = "Ошибка : ProcessingFailed ошибка распознования файла";
		ИНачеЕсли элСтк.Статус	= "Deleted" Тогда 
			Зап.Готово = -1;
			Зап.Состояние = "Ошибка";
			Зап.Результат = "Ошибка : Deleted запрос удален";
		ИНачеЕсли элСтк.Статус	= "NotEnoughCredits" Тогда 
			Зап.Готово = -1;
			Зап.Состояние = "Ошибка";
			Зап.Результат = "Ошибка : NotEnoughCredits нет денег на счете ABBYY";
		КонецЕСЛИ;
		
		Если Зап.Готово = 1 Тогда
			отвСтк = СкачатьРаспознатьФайлНаСервере(элСтк.URL);
			Если отвСтк.Ошибка = Истина Тогда
				Зап.Готово = -1;
				Зап.Результат = отвСтк.ОписаниеОшибки;
				Зап.Состояние = "Ошибка";
				Сообщить(отвСтк.ОписаниеОшибки);
			ИНаче
				Зап.Результат = Новый ХранилищеЗначения(отвСтк.ДанныеСчетФактуры);
			КонецЕСЛИ;
		КонецЕСЛИ;
		Зап.Записать();
		
		
		
	КонецЦикла;
	
	
КонецПроцедуры

//https://ocrsdk.blob.core.windows.net/files/d705d314-758a-4c19-b18b-8d97f6b2dc95.result?sv=2012-02-12&se=2019-07-20T00%3A00%3A00Z&sr=b&si=downloadResults&sig=9UEUogbzlG8WfD%2B2%2BXGFHIV1ymYhKwYTrI429zcP5ow%3D
Функция СкачатьРаспознатьФайлНаСервере(URL)
	сткРез = новый Структура("Ошибка,ДанныеСчетФактуры,ОписаниеОшибки",Ложь,"","");
	
	АдресСервера = 	"ocrsdk.blob.core.windows.net";
	URL = СРед(URL,Найти(URL,АдресСервера)+СтрДлина(АдресСервера));
	
	Запрос = Новый HTTPЗапрос(URL);
	
	Соединение = Новый HTTPСоединение(АдресСервера,,,,,,Новый ЗащищенноеСоединениеOpenSSL);    
	Результат = Соединение.Получить(Запрос);
	Если Результат.КодСостояния <> 200 Тогда 
		СткРез.Ошибка = истина;
		СткРез.ОписаниеОшибки = "Ошибка код :"+Результат.КодСостояния+Символы.ПС+результат.ПолучитьТелоКакСтроку();
		Возврат сткРез;
	КонецЕСЛИ;
	
	//СткРез.Адрес = ПоместитьВоВременноеХранилище(Результат.ПолучитьТелоКакДвоичныеДанные());
	
	ВременныйФайлXLS = ПолучитьИмяВременногоФайла("xlsx");
	Результат.ПолучитьТелоКакДвоичныеДанные().Записать(ВременныйФайлXLS);
	Данные = РаспознаваниеGFM.ПрочитатьНаСервере(ВременныйФайлXLS);
	Если Данные.ДанныеСчетФактуры<>Неопределено ТОгда
		СткРез.ДанныеСчетФактуры = Данные.ДанныеСчетФактуры;
	ИНАче
		СткРез.Ошибка = Истина;
		СткРез.ОписаниеОшибки = "При распознавании не обнаружены данные по счет-фактуре";
	КонецеСЛИ;
	
	Возврат СткРез;
	
	
КонецФункции


Функция КомандаНаСервере(ИмяМетода)
	
	Соединение = ПолучитьСоединение();
	Запрос = Новый HTTPЗапрос(ИмяМетода);
	Результат = Соединение.Получить(Запрос);
	
	рез="";
	Если Результат.КодСостояния <> 200 Тогда 
		Рез = "Ошибка код :"+Результат.КодСостояния+Символы.ПС;
	КонецЕСЛИ;
	Возврат РЕз+результат.ПолучитьТелоКакСтроку();
	
	
КонецФункции

Функция ПроверитьГотовностьТбл()
	
	сткРез = новый Структура("Ошибка,ПолученОтвет,ОписаниеОшибки",Ложь,Ложь,"");
	
	Соединение = ПолучитьСоединение();
	Запрос = Новый HTTPЗапрос("/v2/listFinishedTasks");
    Результат = Соединение.Получить(Запрос);
	
	
	Если Результат.КодСостояния <> 200 Тогда 
		СткРез.Ошибка = истина;
		СткРез.ОписаниеОшибки = "Ошибка код :"+Результат.КодСостояния+Символы.ПС+результат.ПолучитьТелоКакСтроку();
		Возврат сткРез;
	КонецЕСЛИ;
	
	
	сооИд = Новый Соответствие;
	пСтк = Новый Структура("Ид",Неопределено);
	
	тхт =результат.ПолучитьТелоКакСтроку();
	чтение = Новый ЧтениеJSON;
	чтение.УстановитьСтроку(результат.ПолучитьТелоКакСтроку());
	Пока чтение.Прочитать() Цикл
		Если чтение.ТипТекущегоЗначения<>ТипЗначенияJSON.ИмяСвойства Тогда Продолжить; КонецЕСЛИ;
		
		Если чтение.ТекущееЗначение	= "taskId" Тогда
			если пСтк.ид<>Неопределено Тогда
				сооИд.Вставить(пСтк.ид,пСтк);
				пСтк = Новый Структура("Ид",Неопределено);
			КонецЕСЛИ;
			
			чтение.Прочитать();
			пСтк.вставить("ид",чтение.ТекущееЗначение);
		ИНачеЕсли чтение.ТекущееЗначение	= "status" Тогда
			чтение.Прочитать();
			пСтк.вставить("Статус",чтение.ТекущееЗначение);
		ИНачеЕсли чтение.ТекущееЗначение	= "description" Тогда
			чтение.Прочитать();
			пСтк.вставить("описание",чтение.ТекущееЗначение);
		ИНачеЕсли чтение.ТекущееЗначение	= "resultUrls" Тогда
			чтение.Прочитать();
			Пока чтение.Прочитать() Цикл
				Если чтение.ТипТекущегоЗначения	= ТипЗначенияJSON.Строка Тогда
					пСтк.вставить("URL", чтение.ТекущееЗначение);
					прервать;
				КонецЕСЛИ;
			КонецЦиклА;
		КонецЕСЛИ;
		
		
	КонецЦикла;
	сооИд.Вставить(пСтк.ид,пСтк);
	
	//чтение = Новый ЧтениеXML;
	//чтение.УстановитьСтроку(тхт);
	//Пока Чтение.Прочитать() Цикл
	//	Если Чтение.ТипУзла<>ТипУзлаXML.НачалоЭлемента Тогда ПродолжитЬ; КонецЕСЛИ;
	//	ид = Чтение.ПолучитьАтрибут("id");
	//	статус = Чтение.ПолучитьАтрибут("status");
	//	адрес = СокрЛП(Чтение.ПолучитьАтрибут("resultUrl"));
	//	описание = РаскодироватьСтрокуURL(Чтение.ПолучитьАтрибут("description"));
	//	
	//	СткИд.Вставить(ид,Новый Структура("Статус,Описание,Адрес",Статус,Описание,Адрес)); 
	//	
	//КонецЦикла;
	
	сткРез.вставить("СткИд",сооИд);

	Возврат сткРез;
	
КонецФункции


