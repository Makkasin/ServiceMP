
Функция СткПолучитьСоединение() Экспорт
	
	Стк = Новый Структура();
	
	Стк.Вставить("Сервер","80.251.55.24");
	Стк.Вставить("Порт",51396);
	Стк.Вставить("Логин","Serv");
	Стк.Вставить("Пароль","SERVgfhjkm");
	
	
	Возврат Стк;
	
КонецФункции



Процедура ОБновитьТаблицуПодразделений() Экспорт
	
	  СткСоединение = СткПолучитьСоединение();
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        СткСоединение.Логин, // пользователь для доступа к серверу (если он есть)
        СткСоединение.Пароль, // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	
	Запрос = Новый HTTPЗапрос("/chat_pl/hs/entAPI/OKOPODR");
 
    Результат = Соединение.Получить(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
	Рез = результат.ПолучитьТелоКакСтроку();
	Если Рез = "" ТОгда Возврат; КонецеСЛИ;
	
	Тбл   = XMLзначение(Тип("ХранилищеЗначения"),рез).Получить();
	Тбл.Колонки.Добавить("Инд");
	ДЛя каждого стТБл из Тбл Цикл
		Стр = стТбл.Наименование;
		
		
		Стр = СтрЗаменить(Стр," ",Символы.ПС);
		
		Для а=1 по СтрЧислоСтрок(Стр) Цикл
			Попытка
				п = Число(СтрПолучитьСтроку(стр,а));
			Исключение
				п = Неопределено;
			КонецПопытки;
			
			Если п<> Неопределено Тогда
				стТбл.Инд = п;
				прервать;
			КонецЕСЛИ;
			
		КонецЦикла;
	КонецЦикла;
	
	
	Зап = РегистрыСведений.ВспомогательныеДанные.СоздатьМенеджерЗаписи();
	Зап.ИД = "чатоко";
	Зап.ДатаОбновления = ТекущаяДАта();
	Зап.Хранилище = Новый ХранилищеЗначения(Тбл);
	Зап.Записать();
	
КонецПроцедуры


Процедура ЗапросВЧат(ГУИД) Экспорт
	
	  СткСоединение = СткПолучитьСоединение();
	
		Соединение = Новый HTTPСоединение(
        СткСоединение.Сервер, // сервер (хост)
        СткСоединение.Порт, // порт, по умолчанию для http используется 80, для https 443
        , // пользователь для доступа к серверу (если он есть)
        , // пароль для доступа к серверу (если он есть)
        , // здесь указывается прокси, если он есть
        , // таймаут в секундах, 0 или пусто - не устанавливать
          // защищенное соединение, если используется https
    );
	
	хз = Новый ХранилищеЗначения(ГУИД);
	
	Запрос = Новый HTTPЗапрос("/ProjectOKO/hs/entAPI/OKOCONSTPODR");
	Запрос.УстановитьТелоИзСтроки(XMLСтрока(хз));
 
    Результат = Соединение.POST(Запрос);
	
	Если Результат.КодСостояния <> 200 Тогда 
		ЗаписьЖурналаРегистрации("Ошибка",УровеньЖурналаРегистрации.Ошибка,,,результат.ПолучитьТелоКакСтроку());
		Сообщить("Ошибка синхронизации: код "+Результат.КодСостояния);
		Сообщить(результат.ПолучитьТелоКакСтроку());
		Возврат ;
	КонецЕСЛИ;
	
КонецПроцедуры

Функция НайтиКолонну(номАК,end_session) 
	
	Запрос = новый ЗАпрос;
	Запрос.Текст = "SELECT Хранилище, ДатаОбновления FROM РегистрСведений.ВспомогательныеДанные Рег WHERE ИД = ""чатоко""  ";
	ВЫб = Запрос.Выполнить().Выбрать();
	хз = Неопределено;
	Если ВЫб.следующий() Тогда
		Если ТекущаяДата() - Выб.ДатаОбновления < 3600*5 Тогда
			хз = выб.хранилище;	
		КонецЕСЛИ;
	КонецеСЛИ;
	
	ФоновыеЗадания.Выполнить("глАлиса.ОБновитьТаблицуПодразделений");
	Если хз = Неопределено Тогда
		Возврат "Идет обновление данных. Повторите запрос еще раз через одну минуту.";
	КонецесЛИ;
	
	 Тбл = хз.Получить();
	 
	 Для каждого Стр из Тбл цикл
		 Если Стр.Инд = номАК Тогда
			 Мас = Новый Массив;
			 Мас.Добавить(Стр.Наименование);
			 ФоновыеЗадания.Выполнить("глАлиса.ЗапросВЧАТ",Мас);
			 end_session = Истина;
			 Возврат "Сейчас покажу "+Стр.Наименование;
		 КонецЕСЛИ;
	 КонецЦикла;
	
	 Возврат Неопределено;
	
КонецФункции

Функция ПолучитьОтветАлисы(Тело,end_session)
	
	чтение = новый ЧтениеJSON();
	чтение.УстановитьСтроку(тело);
	Соо = ПрочитатьJSON(чтение,Истина);
	Если ТипЗнч(соо) <> Тип("Соответствие") Тогда
		Возврат "Непонятный запрос, повторите еще раз";
	КонецЕСлИ;
	
	request = Соо.Получить("request"); //":{""command
	Если ТипЗнч(request) <> Тип("Соответствие") Тогда
		Возврат "Непонятный запрос, повторите еще раз";
	КонецЕСлИ;
	
	Стр = request.Получить("command");
	Если СокрЛП(Стр)= "" Тогда
		Возврат "Назовите автоколонну, которую нужно показать";
	КонецЕСЛИ;
	
	Стр = СтрЗаменить(Стр," ",Символы.ПС);
	
	Для а=1 по СтрЧислоСтрок(Стр) Цикл
		Попытка
			п = Число(СтрПолучитьСтроку(стр,а));
		Исключение
			п = Неопределено;
		КонецПопытки;
		
		Если п<> Неопределено Тогда
			//@skip-check query-in-loop
			Рез=НайтиКолонну(п,end_session);
			Если Рез<>Неопределено Тогда
				Возврат Рез;
			ИНаче
				прервать;
			КонецЕСЛИ;
		КонецЕСЛИ;
		
	КонецЦикла;
	
	
	Возврат "Не могу определить такую автоколонну. Повторите еще раз";
	
	
КонецФункции


Функция АЛГА(Тело) Экспорт
	
	тхт = Новый ЗаписьТекста("D:\1.txt",,,истина);
	тхт.ЗаписатьСтроку("-------------- "+ТекущаяДата());
	тхт.Записатьстроку(тело);
	
	end_session = Ложь;
	ОтветАлисы = ПолучитьОтветАлисы(Тело,end_session);
	
	Стк = новый структура();
	Стк.Вставить("text",ОтветАлисы);
	Стк.Вставить("end_session",end_session);
	
	Рез = Новый Структура();
	Рез.вставить("response",Стк);
	Рез.вставить("version","1.0");
	
	
	записьJSON = Новый ЗаписьJSON;
	записьJSON.УстановитьСтроку();
	ЗаписатьJSON(записьJSON,Рез,Новый НастройкиСериализацииJSON);
	
	Возврат записьJSON.Закрыть();
	
КонецФункции