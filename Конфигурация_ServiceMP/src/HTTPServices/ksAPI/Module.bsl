//Добавил эту строку в демо2
Процедура тблФорматGUID(Тбл) Экспорт
	
	Стк = Новый структура();
	Для а=1 по ТБл.Колонки.Количество() Цикл
		Кол = ТБл.Колонки[а-1];
		
		Если Найти(Кол.Имя,"GUID") <> 0 Тогда
			п = Кол.Имя;
			Кол.Имя = п+"1";
			ТБл.Колонки.Добавить(п,Новый ОписаниеТипов("Строка"));
			Стк.Вставить(п+"1",п);
		КонецЕСЛИ;
		
	КонеццИклА;
	
	Если Стк.Количество()<>0 Тогда
		Для каждого Стр из ТБл Цикл
			Для каждого эл из Стк Цикл
				Стр[эл.Значение] = СокрЛП(Стр[эл.Ключ].УникальныйИдентификатор());
			Конеццикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаписатьХранилищеВСтроку(Тбл,ТекДт=Неопределено,Тбл2=Неопределено)
	
	Если ТекДт = Неопределено Тогда
		ТекДТ = ТекущаяДата();
	КонецЕСЛИ;
	
	тблФорматGUID(Тбл);
	
	
	Мас = Новый МАссив;
	Мас.Добавить(ТекДТ);
	МАс.ДОбавить(ТБл);
	МАс.ДОбавить(ТБл2);
	
	хр = Новый ХранилищеЗначения(Мас,Новый СжатиеДанных(5));
	Возврат XMLСтрока(хр);
	
КонецФункции

Функция ПолучитьСоединениеАЗУР()
	
	  
	Соединение=Новый ComObject("ADODB.Connection");
	Соединение.CommandTimeout = 600;
	Соединение.ConnectionTimeout = 30;
	СтрСоединения = "Driver={SQL Server};Server=tcp:urals.database.windows.net,1433;Initial Catalog=SVOD;Persist Security Info=False;User ID=max;Password=1!qqqqqq;MultipleActiveResultSets=False;Encrypt=True;TrustServerCertificate=False;Connection Timeout=30;";//ПолучитьСтрокуСоединенияSQL();
	Попытка
		Соединение.Open(СтрСоединения);
	Исключение
		Сообщить(ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;
	
	
	Возврат Соединение;
	
КонецФункции

Функция ОтправитьGOOGLEMESSSAGE(СтрДД,КодСостояния=200)
	
	КодСостояния = 310;
	
		СткПар = XMLЗначение(Тип("ХранилищеЗначения"),СтрДД).Получить();
		Если ТипЗнч(СткПар)<>Тип("Структура") ТОгда 
			КодСостояния = "308";
			Возврат "Ошибка формата переданных данных!";
		КонецеСЛИ;
		
		
	//Мас = Новый Массив;
	//Для каждого Эл из СткПар.Получатели Цикл
	//	Мас.Добавить(Эл.ИдентификаторУстройства);
	//КонецЦикла;
	//
	//
	//КлючСервера = "AIzaSyAA8UrUri-3xQ5ipsHOIt2cUvYLIMKkv2Q";
	//    
	//АдресСервера = "fcm.googleapis.com/fcm/send";
	//    
	//ssl = Новый ЗащищенноеСоединениеOpenSSL();
	//Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
	//    
	//ТелоСообщения = Новый Структура;
	//ТелоСообщения.Вставить("title", СткПар.Заголовок);
	//ТелоСообщения.Вставить("name", СткПар.Тема);
	//ТелоСообщения.Вставить("text", СткПар.Текст);
	//    
	//ПараметрыСообщения = Новый Структура;                          
	//ПараметрыСообщения.Вставить("registration_ids", Мас);  // получаем на мобилках, как и при GCM ( IDПодписчика = ДоставляемыеУведомления.ПолучитьИдентификаторПодписчикаУведомлений());
	//ПараметрыСообщения.Вставить("data", ТелоСообщения);
	//    
	//ЗаписьJSON = Новый ЗаписьJSON;
	//ЗаписьJSON.УстановитьСтроку();
	//ЗаписатьJSON(ЗаписьJSON, ПараметрыСообщения);
	//    
	//СтрокаТелоЗапроса = ЗаписьJSON.Закрыть();
	//    
	//Запрос = Новый HTTPЗапрос();
	//Запрос.Заголовки.Вставить("Content-Type", "application/json");
	//Запрос.Заголовки.Вставить("Authorization", "key="+КлючСервера);
	//Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, КодировкаТекста.UTF8);
	//    
	//Ответ = Соединение.ОтправитьДляОбработки(Запрос); 

	Ответ = глВыгрузкаДанных.ОтправитьMSG_GOOGLE(СткПар);
	
	КодСостояния = Ответ.КодСостояния; 
	Возврат Ответ.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция ПолучитьТблАгр(оргИд)
	
	ТекстЗапроса = "
	|SELECT
	|  id,
	|  agName,
	|  agCode
	|
	|FROM SVOD.dbo.sprVidAgr
	|Where orgID = N'"+оргИд+"'
	|";
	
	
	Соединение = ПолучитьСоединениеАЗУР();
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	ТБл = Новый ТаблицаЗначений;   	                            
	ТБл.Колонки.Добавить("агр");
	Тбл.Колонки.Добавить("Имя");
	Тбл.Колонки.Добавить("Код");
	
	Пока Записи.EOF() = 0 Цикл 
		НовСтр = ТБл.Добавить();
		НовСтр.агр	 	= СокрЛП(Записи.Fields("id").Value);
		НовСтр.Имя 		= СокрЛП(Записи.Fields("agName").Value);
		НовСтр.Код 		= СокрЛП(Записи.Fields("agCode").Value);
		
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	Возврат	Тбл;
	
КонецФункции

Функция ПолучитьТблМасло(СткПар)
	
	оргИд = СткПар.ORG;

	ТекстЗапроса = "
	|SELECT
	|  GarNom,
	|  Agr,
	|  kolDol,
	|  kolZam,
	|  kolAct,
	|  dtZam,
	|  nrDol,
	|  norZam,
	|  dtSynchro
	|
	|FROM SVOD.dbo.oilRsh
	|Where orgID = N'"+оргИд+"'
	|";
	
	
	Соединение = ПолучитьСоединениеАЗУР();
	Записи=Новый ComObject("ADODB.RecordSet");
	Записи.Open(ТекстЗапроса,Соединение);
	
	ТБл = Новый ТаблицаЗначений;   	                            
	ТБл.Колонки.Добавить("ГарНомер");
	ТБл.Колонки.Добавить("агр");
	Тбл.Колонки.Добавить("Долив");
	Тбл.Колонки.Добавить("Замена");
	Тбл.Колонки.Добавить("Акт");
	Тбл.Колонки.Добавить("дтЗам");
	Тбл.Колонки.Добавить("нрДолив");
	Тбл.Колонки.Добавить("НормаЗамена");
	Тбл.Колонки.Добавить("дтСинхро");
	
	Пока Записи.EOF() = 0 Цикл 
		НовСтр = ТБл.Добавить();
		НовСтр.ГарНомер 	= СокрЛП(Записи.Fields("GarNom").Value);
		НовСтр.агр	 	= СокрЛП(Записи.Fields("Agr").Value);
		НовСтр.Долив 	= Число(Записи.Fields("kolDol").Value);
		НовСтр.Замена 	= Число(Записи.Fields("kolZam").Value);
		НовСтр.Акт	 	= Число(Записи.Fields("kolAct").Value);
		НовСтр.дтЗам 	= Записи.Fields("dtZam").Value;
		НовСтр.нрДолив 	= Число(Записи.Fields("nrDol").Value);
		НовСтр.НормаЗамена 	= Число(Записи.Fields("norZam").Value);
		НовСтр.дтСинхро 	= Записи.Fields("dtSynchro").Value;
		
		Записи.MoveNext(); 
	КонецЦикла; 
	
	Записи.Close(); 
	Соединение.Close(); 
	
	ТекДт = ТекущаяДата();
	Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт,ПолучитьТблАгр(оргИд));
	
КонецФункции

Функция ДанныеОРГ(СткПар)
	
	Тбл = глВыгрузкаДанных.ДанныеОРГ();
	
	ТекДт = ТекущаяДата();
	Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт);
	
КонецФункции

Функция ДанныеОРГhtml(СткПар)
	
	Тбл = глВыгрузкаДанных.ДанныеОРГ();
	
	Таб = Новый ТабличныйДокумент;
	Соо=Новый Соответствие;
	Линия = новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
	нс = 1;
	номКол=0;
	Для каждого Кол из Тбл.Колонки Цикл
		номКол=номКол+1;
		Таб.Область(нс,номКол,нс,номКол).Текст = Кол.Имя;
		Соо.вставить(номКол,СтрДлина(Кол.Имя));
		
		Таб.Область(нс,1,нс,Таб.ШиринаТаблицы).ГраницаСнизу=новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,2);
	КонецЦикла;
	
	
	Для каждого Стр из Тбл Цикл
		нс=нс+1;
		номКол=0;
		Для каждого Кол из Тбл.Колонки Цикл
			номКол=номКол+1;
			Таб.Область(нс,номКол,нс,номКол).Текст = Стр[Кол.имя];
			
			п = СтрДлина(Стр[Кол.имя]);
			Если п > Соо.Получить(номКол) ТОгда
				Соо.вставить(номКол,п)
			КонецЕСЛИ;
		КонецЦикла;
		
		Таб.Область(нс,1,нс,Таб.ШиринаТаблицы).ГраницаСнизу=Линия;
		Таб.Область(нс,,нс,).ВысотаСтроки=15;
		Таб.Область(нс,,нс,).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
	КонецЦикла;
	
	Для каждого Эл из Соо Цикл
		Таб.Область(,эл.Ключ,,Эл.Ключ).ШиринаКолонки = Эл.Значение;	
	КонецЦикла;
	
	
	
	ИмяФайла=ПолучитьИмяВременногоФайла("HTML");
	
	Таб.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.HTML);
	
	тхт =Новый ТекстовыйДокумент;
	тхт.Прочитать(ИмяФайла);
	Возврат тхт.ПолучитьТекст();
	
	ПотокФайла = Новый ПотокВПамяти();
	Таб.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.PDF);
	//Здесь ПотокФайла.Размер() больше нуля, т.е. все в порядке.
	ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
	Возврат ДвоичныеДанныеФайла;	
	
	
КонецФункции

Функция ДанныеГараж()
	
	Тбл = глВыгрузкаДанных.ДанныеГараж();
	
	ТекДт = ТекущаяДата();
	Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт);
	
КонецФункции

Функция ДанныеСпр(СткПар)
	                   
	Запрос = Новый Запрос;
	
	Если СткПар.Свойство("izmDt")=FALSE Тогда
		Запрос.УстановитьПараметр("ДтИзм",Дата(1,1,1));
	ИНаче
		Запрос.УстановитьПараметр("ДтИзм",Дата(СткПар.izmDt));
	КонецеСЛИ;
	
	
	Запрос.Текст = "ВЫБРАТЬ 
	               |	""Номенклатура"" ВидСпр,               
	               |	СпрНом.Ссылка GUID,
	               |	СпрНом.ЭтоГруппа,
	               |	СпрНом.Родитель РодительGUID,
	               |	СпрНом.ПометкаУдаления,
	               |	СпрНом.Наименование,
	               |	CASE WHEN СпрНом.ЭтоГруппа THEN """" ELSE ПодСтрока(СпрНом.НаименованиеПолное,1,150) END НаименованиеПолное,
	               |	СпрНом.Код,
	               |	ISNULL(СпрНом.Артикул,"""") Артикул,
	               |	ISNULL(СпрНом.БазоваяЕдиницаИзмерения,"""") ЕдИзм,
	               |    Значение(Справочник.Номенклатура.ПустаяСсылка)  НоменклатураGUID,
	               |    Значение(Справочник.Производители.ПустаяСсылка) ПроизводительGUID
	               |
	               |ИЗ
	               |	Справочник.Номенклатура КАК СпрНом
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |		ПО ШтрихКоды.Номенклатура = СпрНом.Ссылка
	               |	               
				   |WHERE (СпрНом.ЭтоГруппа = Истина    или СпрНом.ПометкаУдаления = ложь или СпрНом.ДатаИзменения > &ДтИзм )
	               |  and (СпрНом.ДатаИзменения > &ДтИзм or &ДтИзм = ДатаВремя(1,1,1,0,0,0) )
	               |
				   |UNION ALL
				   |
				   |ВЫБРАТЬ
	               |	""Производители"" ВидСпр,               
				   |	Производители.Ссылка,
				   |	ложь ЭтоГруппа,
				   |	Значение(Справочник.Производители.ПустаяСсылка) Родитель,
				   |	Производители.ПометкаУдаления,
				   |	Производители.Наименование,
				   |	Производители.Наименование НаименованиеПолное,
				   |	Производители.Код,
				   |    """" Артикул,
				   |    """" ЕдИзм,
	               |    Значение(Справочник.Номенклатура.ПустаяСсылка)  НоменклатураGUID,
	               |    Значение(Справочник.Производители.ПустаяСсылка) ПроизводительGUID
				   |
				   |ИЗ
				   |	Справочник.Производители КАК Производители
	               |WHERE (Производители.ДатаИзменения > &ДтИзм or &ДтИзм = ДатаВремя(1,1,1,0,0,0) )
				   |
	               |
				   |UNION ALL
				   |
				   |ВЫБРАТЬ
	               |	""ШтрихКоды"" ВидСпр,               
				   |	Значение(Справочник.Номенклатура.ПустаяСсылка) GUID,
				   |	ЛОжь ЭтоГруппа,
				   |	Значение(Справочник.Номенклатура.ПустаяСсылка) Родитель,
				   |	Ложь ПометкаУдаления,
				   |	ШтрихКод Наименование,
				   |	"""" НаименованиеПолное,
				   |	"""" Код,
				   |    """" Артикул,
				   |    """" ЕдИзм,
	               |    Номенклатура НоменклатураGUID,
	               |    Производитель ПроизводительGUID
				   |
				   |ИЗ
				   |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |WHERE (ШтрихКоды.ДатаИзменения > &ДтИзм or &ДтИзм = ДатаВремя(1,1,1,0,0,0) )
				   |
				   |";
				   
				   
					ТекДт = ТекущаяДата();
					Тбл = Запрос.Выполнить().Выгрузить();
					Возврат	ЗаписатьХранилищеВСтроку(Тбл,ТекДт);
	
КонецФункции

Функция ЗаписатьШК(СткПар,КодСостояния)
	
	ЗапДж = НОвый ЗаписьJSON;
	ЗапДЖ.УстановитьСтроку();
	ЗапДж.ЗаписатьНачалоОбъекта();
	
	НадоПерезаписать = СткПар.Change;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ШтрихКоды.ШтрихКод,
	               |	ШтрихКоды.Номенклатура,
	               |	ШтрихКоды.Производитель
	               |ИЗ
	               |	РегистрСведений.ШтрихКоды КАК ШтрихКоды
	               |ГДЕ
	               |	ШтрихКоды.ШтрихКод = &ШтрихКод";
				   Запрос.УстановитьПараметр("ШтрихКод",СткПар.Bar);
				   ТБл = Запрос.Выполнить().Выгрузить();
				   
	ТекНом = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СткПар.GUIDnom));
	ТекПрз = Справочники.Производители.ПолучитьСсылку(Новый УникальныйИдентификатор(СткПар.GUIDprz));
				   
	Если Тбл.Количество()<>0 
       и НадоПерезаписать = 0 Тогда
	   
		   ЗапДЖ.ЗаписатьИмяСвойства("ШтрихКод");
		   ЗапДж.ЗаписатьЗначение("Есть штрихкод "+СткПар.Bar+" в базе!");
		   
		   Стр = тбл[0];
		   Если Стр.Номенклатура = ТекНом 
			   и Стр.Производитель = ТекПрз ТОгда
			   КодСостояния = 200;
		   ИНАче
			   КодСостояния = 400;
		   КонецеСЛИ;
		
	Иначе	
		Зап = РегистрыСведений.ШтрихКоды.СоздатьМенеджерЗаписи();
		Зап.ШтрихКод = СткПар.Bar;
		Зап.Номенклатура  = ТекНом;
		Зап.Производитель = ТекПрз;
		Зап.Комментарий = "Загружено "+ТекущаяДата();
		Зап.Записать();
		
		ЗапДЖ.ЗаписатьИмяСвойства("ШтрихКод");
		ЗапДж.ЗаписатьЗначение(Зап.ШтрихКод);
		
		КодСостояния = 200;
	КонецеСЛИ;
	ЗапДЖ.ЗаписатьКонецОбъекта();
	
	Возврат ЗапДЖ.Закрыть();
	
КонецФункции

Функция ЗаписатьСпр(СтрПар,КодСостояния)
	
	СткПар = новый Структура;
	ДЛя а=1 по СтрЧислоСтрок(СтрПар) Цикл
		Попытка
			СткПар.Вставить(СтрПолучитьСтроку(СтрПар,а),СтрПолучитьСтроку(СтрПар,а+1));
		Исключение
			ЗапДж = НОвый ЗаписьJSON;
			ЗапДЖ.УстановитьСтроку();
			ЗапДж.ЗаписатьНачалоОбъекта();
			ЗапДЖ.ЗаписатьКонецОбъекта();
			Возврат ЗапДЖ.Закрыть();
		КонецПопытки;
		а=а+1;
	КонецЦикла;
	
	ВидСпр    = СткПар.Vid;
	Если ВидСпр = "ШтрихКоды" Тогда
		 Возврат ЗаписатьШК(СткПар,КодСостояния);
	ИНачеЕсли ВидСпр = "инвИнвентаризация" Тогда
		 Возврат Ложь;//ЗаписатьинвИнвентаризация(СткПар,КодСостояния);
	КонецЕСЛИ;
	
	ГУИД       = Новый УникальныйИдентификатор(СткПар.GUID);
	ГУИДрод    = Новый УникальныйИдентификатор(СткПар.GUIDpar);
	ЭтоГРуппа  = СткПар.GRP;
	ПометкаУдл = СткПар.Mark;
	НадоПерезаписать = СткПар.Change;
	Имя   = СткПар.Nam;
	
	ЗапДж = НОвый ЗаписьJSON;
	ЗапДЖ.УстановитьСтроку();
	ЗапДж.ЗаписатьНачалоОбъекта();
	
	
	ЭтоНовыйОбъект = ЛОжь;
	cc = Справочники[ВидСпр].ПолучитьСсылку(ГУИД);
	Если Найти(сокрЛП(cc),"не найден")<>0 Тогда
		Если ЭтоГруппа=1 Тогда
			Обк = справочники[ВидСпр].СоздатьГруппу();
		ИНаче
			Обк = справочники[ВидСпр].СоздатьЭлемент();
		КонецесЛИ;
		Обк.УстановитьСсылкуНового(cc);
		
		ЭтоНовыйОбъект = Истина;
		ЗапДЖ.ЗаписатьИмяСвойства("новыйобъект");
		ЗапДж.ЗаписатьЗначение("1");
		
	ИНАчеЕсли НадоПерезаписать = "1" Тогда
		Обк = cc.ПолучитьОбъект();
		
	Иначе
		ЗапДЖ.ЗаписатьИмяСвойства("новыйобъект");
		ЗапДж.ЗаписатьЗначение("0");
		
		ЗапДЖ.ЗаписатьИмяСвойства("Код");
		ЗапДж.ЗаписатьЗначение("уже есть такой объект");
		
		ЗапДЖ.ЗаписатьКонецОбъекта();
		
		КодСостояния = 400;
		Возврат ЗапДЖ.Закрыть();; //уже есть такой объект
		
	КонецЕСЛИ;
	
	 Обк.Родитель = Справочники[ВидСпр].ПолучитьСсылку(Новый УникальныйИдентификатор(ГУИДрод));
	 Обк.Наименование = Имя;
	 
	 Если ВидСпр = "Номенклатура" Тогда
		 
		 Обк.НаименованиеПолное =  Имя;
		 Обк.Артикул = СткПар.Art;
		 Обк.БазоваяЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(СткПар.Ed);
		 Обк.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		 Обк.Услуга = Ложь;
		 Если ЭтоНовыйОбъект ТОгда
			 РегистрыСведений.РегистрНумерации.ксНовыйНомерПриУстановкеНовогоКода(Обк,Ложь,"");
		 КонецЕСЛИ;
	 КонецЕСЛИ;
	 
	 Обк.Комментарий = "Загружено "+ТекущаяДата();
	 Обк.ДатаИзменения = ТекущаяДата();
	 Обк.ОбменДанными.Загрузка = Истина;
	 ОБк.Записать();

	 Если ПометкаУдл = "1" и Обк.ПометкаУдаления = Ложь Тогда
	    Обк.УстановитьПометкуУдаления(Истина);
	 ИНачеЕсли ПометкаУдл = "0" и Обк.ПометкаУдаления = Истина Тогда
	    Обк.УстановитьПометкуУдаления(Ложь);
	 КонецЕсли;
	 
	
	ЗапДЖ.ЗаписатьИмяСвойства("Код");
	ЗапДж.ЗаписатьЗначение(Обк.Код);
	
	ЗапДЖ.ЗаписатьКонецОбъекта();

	КодСостояния = 200;
	Возврат ЗапДЖ.Закрыть();
	
КонецФункции

Функция СткПарПолучить(СткПар,Рек)
	Зн = Неопределено;
	Если сткПар.свойство(Рек,зн) = Истина ТОгда
		Возврат Зн;
	ИНаче
		Возврат Неопределено;
	КонецеСЛИ;
	
КонецФункции

Функция ЗаписатьЗапросНаНовуюНомен(Запрос,КодСостояния)
	
	СткПар = новый Структура;
	ЕстьКартинка = Запрос.Заголовки.Получить("postpict");
	Если ЕстьКартинка=1 ТОгда
		Бин   = Запрос.ПолучитьТелоКакСтроку();
	ИНаче
		стрПар = Запрос.ПолучитьТелоКакСтроку();
		Если стрЧислоСтрок(стрПар)>1 Тогда
			ДЛя а=1 по СтрЧислоСтрок(СтрПар) Цикл
				СткПар.Вставить(СтрПолучитьСтроку(СтрПар,а),СтрПолучитьСтроку(СтрПар,а+1));
				а=а+1;
			КонецЦикла;
		КонецЕсли;
	КонецеСЛИ;
	
	ДатаЗакрытия = Неопределено;
	прчОтказа = Неопределено;
	Если сткПар.Свойство("id1s")=Истина ТОгда
		ид    	  = СткПарПолучить(СткПар,"id1s");
		Плз   	  = СткПарПолучить(СткПар,"user");
		Имя   	  = СткПарПолучить(СткПар,"name");
		едИзм  	  = СткПарПолучить(СткПар,"edizm");
		идНом 	  = СткПарПолучить(СткПар,"idnom");
		прчОтказа = СткПарПолучить(СткПар,"prOtkaz");
		ШтрихКод  = СткПарПолучить(СткПар,"barcode1s");
		Если сткПар.Свойство("dtZkr")=Истина Тогда
			ДатаЗакрытия = XMLЗначение(Тип("Дата"),сткПар.dtZkr);
		КонецесЛИ;
	ИНаче
		ид    = Запрос.Заголовки.Получить("id1s");
		Плз   = Запрос.Заголовки.Получить("user");
		Имя   = Запрос.Заголовки.Получить("name");
		едИзм = Запрос.Заголовки.Получить("edizm");
		идНом = Запрос.Заголовки.Получить("idnom");
		ШтрихКод = Запрос.Заголовки.Получить("barcode1s")
	КонецеслИ;
	
	
	
	
	Зап = РегистрыСведений.ксЗапросНаНовуюНоменклатуру.СоздатьМенеджерЗаписи();
	Зап.идЗапроса = ид;
	
	Зап.Прочитать();
	ЭтоНовый = Не Зап.Выбран();
	Если Зап.ДатаЗакрытияЗапроса<>Дата(1,1,1) и ДатаЗакрытия=Неопределено Тогда
		КодСостояния = 311;
		Возврат "Запрос уже закрыт!";
	КонецЕСЛИ;
	
	
	Зап.идЗапроса = ид;
	Зап.Наименование = Имя;
	Зап.ЕдИзмСтр = едИзм;
	Если идНом<>Неопределено Тогда
		Зап.Номенклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(идНом));
	ИНаче
		Зап.Номенклатура = Неопределено;
	КонецЕсли;
	
	Если ЕстьКартинка=1 Тогда
		Если Зап.Партия <> 0 Тогда
			Бин = Зап.Картинка.Получить()+Бин;	
		КонецЕСЛИ;
		Зап.идЗапроса = ид;
		Зап.Партия = Зап.Партия + 1;
		
		Если Запрос.Заголовки.Получить("finish1s")="1" Тогда
			Зап.Картинка = Новый ХранилищеЗначения(Base64Значение(Бин));
		ИНАче
			Зап.Картинка = Новый ХранилищеЗначения(Бин);
		КонецеСЛИ;
	КонецЕСЛИ;
	
	Если ДатаЗакрытия<>Неопределено Тогда
		Зап.ДатаЗакрытияЗапроса = ДатаЗакрытия;
		Зап.ПричинаОтказа = прчОтказа;
	ИНАче
		Зап.Пользователь = Плз;
		Зап.ШтрихКод = ШтрихКод;
		Зап.Лог = ТекущаяДата();
		Зап.НаименованиеИзначальное = Имя;
	КонецеСЛИ;
	Зап.Записать();
	
	Если ЭтоНовый ТОгда
		ОтправитьPUSH("Запрос на новую номенклатуру",""+Имя+" "+ТекущаяДата()+" от "+Плз);
	КонецеСЛИ;
	
	
	КодСостояния = 200;
	Возврат "Запрос принят!";
	
КонецФункции

Процедура ОтправитьPUSH(Тема,Текст)
	
	
	Стк = Новый Структура();
	Стк.Вставить("Тема",Тема);
	Стк.Вставить("Текст",Текст);
	
	Мас = Новый Массив;
	Наб = РегистрыСведений.ксИдДейвайсов.СоздатьНаборЗаписей();
	Наб.Прочитать();
	Для каждого Зап из Наб Цикл
		Если Зап.СтатусРоль = 0 ТОгда Продолжить; КонецеСЛИ;
		Мас.Добавить(Зап.идПодписки.Получить());
	КонецЦиклА;
	Стк.Вставить("Получатели",Мас);
	
	ОтправитьGOOGLEMESSSAGE(Стк);
	
КонецПроцедуры

Функция ЗаписатьИдДевайс(СтрПарДД)
	
	СткПар = XMLЗначение(Тип("ХранилищеЗначения"),СтрПарДД).Получить();
	
	Зап = РегистрыСведений.ксИдДейвайсов.СоздатьМенеджерЗаписи();
	Зап.идДевайса = СткПар.idDev;
	Зап.Прочитать();
	
	Зап.идДевайса = СткПар.idDev;
	Зап.Имя = СткПар.name;
	Зап.идПодписки = Новый ХранилищеЗначения(СткПар.idPodp);
	Зап.ДатаОбновления = ТекущаяДата();
	Зап.Записать();
	
	Возврат "ID записан";
	
КонецФункции

Функция Почта_WHATSAPP(Тело,КодСостояния)
	
	Стк = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния=409;
		Возврат "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8""/>
		|<TITLE></TITLE>Неверный тип данных в теле запроса. Тип данных : <"+ТипЗнч(Стк)+">
		| Нужна Структура(""ОтправитьViber,ОтправитьEmail,идФЛ,емайл,Заголовок,Текст,ТабДок"");
		|
		| ОтправитьViber - Булево , признак отправки сообщения на  Viber
		| ОтправитьEmail - Булево , признак отправки сообщения на  Email
		| идФЛ - Строка, ID физ лица зафиксированный в справочнике Viber
		| емайл - Строка, адрес получателя email, + адрес из справоника Viber
		| Табдок - Табличный документ, для отправки в качестве вложения
		|
		|
		| Возврат 200 если метод отработал,
		|
		| В теле ответа  Структура :
		|       - кодВозвратаEmail = 200 - ОК
		|       - кодВозвратаViber = 200 - ОК
		|       - текстОшибкиEmail = <Строка>
		|       - текстОшибкиViber = <Строка>
		|
		|</BODY>
		|</HTML>	
		|
		|";
	КонецЕСЛИ;
	
	сткВозврат = Новый структура("кодВозвратаEmail,кодВозвратаViber,текстОшибкиEmail,текстОшибкиViber",201,201,"Нет признака отправки Email","Нет признака отправки Viber");
	
	ПараметрыСообщения = Новый Структура;                          
	
	ДвоичныеДанныеФайла = Неопределено;
	Если  Стк.Свойство("ТабДок") 
		и ТипЗнч(Стк.ТабДок)=Тип("ТабличныйДокумент") Тогда
		
		
		Стк.ТабДок.АвтоМасштаб = Истина;
		
		ПотокФайла = Новый ПотокВПамяти();
		Стк.ТабДок.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.PDF);
		//Здесь ПотокФайла.Размер() больше нуля, т.е. все в порядке.
		ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
		
		ПараметрыСообщения.Вставить("body","data:application/pdf;base64,"+Base64Строка(ДвоичныеДанныеФайла));
		ПараметрыСообщения.Вставить("filename", "1.pdf");
		ПараметрыСообщения.Вставить("caption", Стк.Заголовок);
		ИмяМетода = "sendFile";
	ИНАче
		ПараметрыСообщения.Вставить("body", Стк.Текст);
	КонецЕсли;
	
	Рез="";
	//Отправим WHATSAPP
	#Область WHATSAPP
	Если Стк.свойство("тел")=999 ТОгда   //Отключить работу через WhatsApp
		
		токен = "p8su6n5y978t2ld0";
		
		АдресСервера = "eu3.chat-api.com/instance78378";
		
		ssl = Новый ЗащищенноеСоединениеOpenSSL();
		Соединение = Новый HTTPСоединение(АдресСервера,,,,,,ssl);
		
		ИмяМетода = "sendMessage";
		
		Если СокрлП(Стк.Тел)<>"" Тогда
			ПараметрыСообщения.Вставить("phone", Стк.Тел);
			
			ЗаписьJSON = Новый ЗаписьJSON;
			ЗаписьJSON.УстановитьСтроку();
			ЗаписатьJSON(ЗаписьJSON, ПараметрыСообщения);
			
			СтрокаТелоЗапроса = ЗаписьJSON.Закрыть();
			
			Запрос = Новый HTTPЗапрос("/"+ИмяМетода+"?token="+токен);
			Запрос.Заголовки.Вставить("Content-Type", "application/json");
			Запрос.Заголовки.Вставить("Token", токен);
			//Запрос.Заголовки.Вставить("Authorization", "key="+КлючСервера);
			Запрос.УстановитьТелоИзСтроки(СтрокаТелоЗапроса, КодировкаТекста.UTF8);
			
			Ответ = Соединение.POST(Запрос); 
			
			
			Если Ответ.КодСостояния<>200 Тогда
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(Ответ.ПолучитьТелоКакСтроку());
				КодСостояния = Ответ.КодСостояния;
				
				Попытка
					СтруктураОтвета = ПрочитатьJSON(ЧтениеJSON);
					Рез = СтруктураОтвета.error+Символы.пс;
				Исключение
					Рез = Ответ.ПолучитьТелоКакСтроку()+Символы.пс;
				КонецПопытки;
			ИНАче
				Рез = "WHATSAPP DONE!";
			КонецЕСЛИ;
		КонецесЛИ;
	КонецесЛИ;
	#КонецОбласти
	
	
	
	//Отправим VIBER
	Рез=Неопределено;
	Если Стк.Свойство("ОтправитьViber",Рез) Тогда
		Если Рез = Истина Тогда
			ЕстьОтправкаПоViber = Ложь;
			
			Лог="";
			текЗн=Неопределено;
			Стк.Свойство("ИдФЛ",текЗн);
			Если ЗначениеЗаполнено(текЗн) ТОгда
				ЕстьОтправкаПоViber = глViber.ОтправитьПоПочтовомуАдресуИлиИдФЛ(текЗн,ДвоичныеДанныеФайла,Стк.Заголовок,Стк.Текст,Лог);	
			КонецЕСЛИ;
			
			Если ЕстьОтправкаПоViber = Ложь Тогда
				текЗн=Неопределено;
				Стк.Свойство("емайл",текЗн);
				Если ЗначениеЗаполнено(текЗн) ТОгда
					ЕстьОтправкаПоViber = глViber.ОтправитьПоПочтовомуАдресуИлиИдФЛ(текЗн,ДвоичныеДанныеФайла,Стк.Заголовок,Стк.Текст,Лог);	
				КонецЕСЛИ;
			КонецЕСЛИ;
			
			Если ЕстьОтправкаПоViber = Ложь Тогда
				Если лог="" Тогда Лог = "Не указан емайл или ID физ лица получателя Viber"; КонецЕсли;
				сткВозврат.кодВозвратаViber = 501;
				сткВозврат.текстОшибкиViber = Лог;
			ИНаче
				сткВозврат.кодВозвратаViber = 200;
				сткВозврат.текстОшибкиViber = "Сообщение отправлено";
			КонецЕСЛИ;
			
		КонецЕсли;
	КонецЕсли;
	
	// Отправим по почте
	Рез=Неопределено;
	Если Стк.Свойство("ОтправитьEmail",Рез) Тогда
		Если СокрлП(Стк.емайл)<>"" Тогда
			Если глПочта.Почта(Стк.емайл,,,Стк.Заголовок,Стк.Текст,ДвоичныеДанныеФайла,,,"1.pdf")=ЛОжь ТОгда
				сткВозврат.кодВозвратаEmail = 501;
				сткВозврат.текстОшибкиEmail = "Ошибка отправки почты "+Стк.емайл;
			ИНАче
				сткВозврат.кодВозвратаEmail = 200;
				сткВозврат.текстОшибкиEmail = "Письмо отправлено";
			КонецЕСЛИ;
		ИНаче
			сткВозврат.кодВозвратаEmail = 502;
			сткВозврат.текстОшибкиEmail = "Не указан емайл получателя";
		КонецЕСЛИ;
	КонецЕсли;	
	
	хр = Новый ХранилищеЗначения(сткВозврат,Новый СжатиеДанных(5));
	Возврат XMLСТрока(хр);
	
КонецФункции

Функция ПереслатьПочту(Тело,КодСостояния)
	
	Стк = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
		  
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния=409;
		
		Возврат "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8""/>
		|<TITLE></TITLE>Неверный тип данных в теле запроса. Тип данных : <"+ТипЗнч(Стк)+"> <br />
|<p><strong>Неверный тип данных в теле запроса</strong>. Тип данных : &lt;Не определено&gt;</p>
|
|<p>Нужна <span style=""color:#3498db"">Структура</span>(&quot;емайл,Заголовок,Текст,Отправитель,Пароль,ДвоичныеДанныеФайла,ИмяФайла&quot;);<br />
|<br />
|<strong>емайл</strong> (обязательно)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;- <span style=""color:#3498db"">Строка или Массив строк</span>, адрес получателя email<br />
|<strong>Заголовок</strong> (обязательно)&nbsp; &nbsp; - <span style=""color:#3498db"">Строка</span>, Тема письма<br />
|<strong>Текст </strong>(обязательно)&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; - <span style=""color:#3498db"">Строка</span>, текст тела письма<br />
|<strong>Отправитель&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</strong>- <span style=""color:#3498db"">Строка</span>, email отправителя (только сервис office365) , если не указан тогда отправиться от 1C-sender@urals.pro<br />
|<strong>Пароль&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>- <span style=""color:#3498db"">Строка</span>, пароль email отправителя, если не укзан отправитель<br />
|<strong>ДвоичныеДанныеФайла&nbsp;&nbsp;</strong>- <span style=""color:#3498db"">ДвоичныеДанные </span>или<br />
|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span style=""color:#3498db"">Структура </span>= ключ - имя файла; значение - ДвоичныеДанные<br />
|&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; вложения письма</p>
|<strong>ИмяФайла&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</strong>- <span style=""color:#3498db"">Строка </span>, имя файла как файл будет отражать во вложении<br />
|
|
|<p>&nbsp;</p>
|
|<p>Возврат <strong>200 </strong>если метод отработал успешно</p>
|</body>
|</html>		
|";		
		
	КонецЕСЛИ;
	
	
	ДвоичныеДанныеФайла=Неопределено;
	Стк.свойство("ДвоичныеДанныеФайла",ДвоичныеДанныеФайла);
	
	Отправитель = Неопределено;
	Стк.свойство("Отправитель",Отправитель);
	
	Пароль = Неопределено;
	Если Отправитель<>"" Тогда
		Стк.свойство("Пароль",Пароль);
	КонецЕСЛИ;
	
	
	ИмяФайла = "1.pdf";
	Стк.свойство("ИмяФайла",ИмяФайла);
	Если СокрЛП(ИмяФайла)="" ТОгда ИмяФайла = "1.pdf"; КонецЕСлИ;
	
	Рез="";
	Если глПочта.Почта(Стк.емайл,Отправитель,Пароль,Стк.Заголовок,Стк.Текст,ДвоичныеДанныеФайла,,,ИмяФайла)=ЛОжь ТОгда
		Рез = РЕз+"Ошибка отправки почты"+Символы.пс;
		КодСостояния = 312;
	ИНАче
		Рез = РЕз+"Почта отправлена!"+Символы.пс;
		КодСостояния = 200;
	КонецеслИ;
	
	Возврат Рез;
	
КонецФункции

Процедура ВставитьСооНастройки(Обк,Соо,ИмяНастройки)
	
	Зн = Обк[ИмяНастройки];
	
	XMLТип = XMLТипЗнч(зн).ИмяТипа;
	Если Найти(XMLТип,"CatalogRef.")<>0 Тогда
		Соо.Вставить(СокрЛП(ИмяНастройки),Новый Структура("Вид,Ид",Сред(XMLТип,12),Зн.УникальныйИдентификатор()));		
	Иначе
		Соо.Вставить(СокрЛП(ИмяНастройки),Зн);		
	КонецЕСЛИ;
	
КонецПроцедуры

Функция ВыгрузитьНастройки(Обк)
	
	Соо = Новый Соответствие;
	ВставитьСооНастройки(Обк,Соо,"Организация");
	ВставитьСооНастройки(Обк,Соо,"ВерсияСинхронизации");
	ВставитьСооНастройки(Обк,Соо,"АдресПринтера");
	ВставитьСооНастройки(Обк,Соо,"АдресСервераПечати");
	ВставитьСооНастройки(Обк,Соо,"ОсновнойСклад");
	ВставитьСооНастройки(Обк,Соо,"ОтправкаНаВнешнийАдрес");
	
	ВставитьСооНастройки(Обк,Соо,"правоНоменклатура");
	ВставитьСооНастройки(Обк,Соо,"ДоступЗапросыНаНовуюНоменклатуру");
	ВставитьСооНастройки(Обк,Соо,"ДоступСогласованиеВыдачиТМЦ");
	ВставитьСооНастройки(Обк,Соо,"ДоступДвиженияПоСкладу");
	ВставитьСооНастройки(Обк,Соо,"ДоступВыдачаТМЦнаТС");
	ВставитьСооНастройки(Обк,Соо,"СписыватьЧерезДокумент");
	ВставитьСооНастройки(Обк,Соо,"ЮралсЧерезИнтернет");
	ВставитьСооНастройки(Обк,Соо,"Наименование");
	
	
	Хранилище = Новый ХранилищеЗначения(Соо, Новый СжатиеДанных(5));
	Возврат XMLСтрока(Хранилище);
	
КонецФункции

Функция ИдДевайса(Тело,КодСостояния)
	
	Соо = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(Соо)<>Тип("Соответствие") Тогда
		КодСостояния=309;
		Возврат "Неверные данные в теле запроса "+ТипЗнч(Соо)+" 
		| Нужно Соответсвие";
	КонецЕСЛИ;
	
	пИд = Соо.Получить("ИдУстройства");
	Если пИд = Неопределено Тогда
		КодСостояния=311;
		Возврат "Ошибка определения параметра ИдУстройства";
	КонецЕслИ;
	
	Сс = Справочники.Планшеты.ПолучитьСсылку(Новый УникальныйИдентификатор(пИд));
	Если Найти(СокрЛП(сс),"Объект не найден")<>0 Тогда
		Обк = Справочники.Планшеты.СоздатьЭлемент();
		Обк.Код = Соо.Получить("ИмяКомпьютера");
		Обк.УстановитьСсылкуНового(сс);
	ИНАче
		Обк = Сс.ПолучитьОбъект();
	КонецеСЛИ;
	
	Если Обк.ДатаСинхронизации = Дата(1,1,1) Тогда
		Если СокрЛП(Соо.Получить("ВерсияСинхронизации")) <> СокрЛП(Обк.ВерсияСинхронизации) Тогда
		//ЗаписьЖурналаРегистрации("ошибка2",,,,СокрЛП(Обк.ВерсияСинхронизации));
			Если Соо.Получить("ЭтоПовтор")=Ложь Тогда
				КодСостояния=201;
				Возврат ВыгрузитьНастройки(Обк);
			ИНаче
				КодСостояния = 312;
				Возврат "Ошибка загрузки настроек из центра! Повтор не прошел!";
			КонецеСЛИ;
		ИНАче
			Обк.ДатаСинхронизации = ТекущаяДата();
		КонецеСЛИ;
	КонецеСЛИ;
	
	Для каждого эл из Соо Цикл
		Если Обк.Метаданные().Реквизиты.Найти(Эл.Ключ)<>Неопределено тогда
			Если ТипЗнч(Эл.Значение)=Тип("Структура") Тогда
				Обк[Эл.Ключ] = Справочники[Эл.Значение.Вид].ПолучитьСсылку(Эл.Значение.Ид);
			ИНаче
				Обк[Эл.Ключ] = Эл.Значение;
			Конецесли;
		КонецЕсли;
	КонецЦикла;
	
	
	Обк.ХранилищеСоо = Новый ХранилищеЗначения(Соо);
	Обк.ДатаПолученияДанных = ТекущаяДата();
	
	Обк.Записать();
	
	
	Возврат "DONE!";
	
КонецФункции


Функция GETИдДевайса(Тело,КодСостояния)
	
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Планшеты.Ссылка КАК Ссылка,
	               |	Планшеты.Наименование КАК Наименование,
	               |	Планшеты.Организация.Наименование КАК Орг
	               |ИЗ
	               |	Справочник.Планшеты КАК Планшеты";
	
	запТ = Запрос.Выполнить().Выгрузить();
	
	ТБл = Новый ТаблицаЗначений;
	ТБл.Колонки.Добавить("ид");
	ТБл.Колонки.Добавить("Имя");
	Для каждого Стр из запТ Цикл
		новСтр = Тбл.Добавить();
		новСтр.ид = Стр.ссылка.УникальныйИдентификатор();
		новСтр.Имя = ""+Стр.Орг+" "+Стр.Наименование;
	КонецЦикла;
	
	ТБл.Сортировать("Имя");
	
	
	Возврат	ЗаписатьХранилищеВСтроку(ТБл,Неопределено);
	
КонецФункции

Процедура ЗаписатьТелоViber(Тело)
	ОБк = Справочники.ЗапросыViber.СоздатьЭлемент();
	Обк.Тело = Тело;
	ОБк.Записать();
	
	масФон = Новый Массив;
	масФон.Добавить(Обк.ссылка);
	ФоновыеЗадания.Выполнить("глВыгрузкаДанных.ОбработкаПринятыхСообщенийВФоне",масФон);
	
КонецПроцедуры

Процедура ЗаписатьТелоJIRA(Тело)
	ОБк = Справочники.ЗапросыViber.СоздатьЭлемент();
	Обк.Тело = Тело;
	ОБк.Записать();
	
	//"customfield_10028":"543551@mail.ru"
	
КонецПроцедуры

Функция ЗаписатьЕрЛОг(Тело,КодСостояния)
	
	Стк = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния=409;
		Возврат "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8""/>
		|<TITLE></TITLE>Неверный тип данных в теле запроса. Тип данных : <"+ТипЗнч(Стк)+"> <br />
		| Нужна Структура(""Организация,ИмяКомпьютера,СтрокаСоединенияИнформационнойБазы,ДатаСобытия,ТекстОшибки""); <br />
		|  <br />
		| Организация - Текст;<br />
		| ИмяКомпьютера - Текст; <br />
		| ИмяПользователя - Текст; <br />
		| СтрокаСоединенияИнформационнойБазы - Текст;<br />
		| ДатаСобытия - Дата;<br />
		| ТипСобытия  - Текст;<br />
		| ТекстОшибки - Текст; <br />
		| <br />
		| <br />
		| Возврат 200 если метод отработал успешно
		|
		|
		|</BODY>
		|</HTML>	
		|
		|";
	КонецЕСЛИ;
	
	
	Зап = РегистрыСведений.ОчередьЕрЛог.СоздатьМенеджерЗаписи();
	Зап.ид = Новый УникальныйИдентификатор();
	Зап.хрДанные = XMLзначение(Тип("ХранилищеЗначения"),Тело);
	Зап.Лог = ТекущаяДата();
	Зап.Записать();
	
	
	Возврат "Очередь записана. ID сообщения = "+Зап.ид;
	
	
	
КонецФункции

Функция ЗаписатьГараж(Тело,КодСостояния)
	
	
	
	Стк = XMLзначение(Тип("ХранилищеЗначения"),Тело).Получить();
	Если ТипЗнч(Стк)<>Тип("Структура") Тогда
		КодСостояния=409;
		Возврат "<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
		|<HTML>
		|<HEAD>
		|<META HTTP-EQUIV=""Content-Type"" CONTENT=""text/html; CHARSET=utf-8""/>
		|<TITLE></TITLE>Неверный тип данных в теле запроса. Тип данных : <"+ТипЗнч(Стк)+"> <br />
		| Нужна Стк = Новый Структура(""ИД,ИНН,Наименование,ПометкаУдаления,lat,lon""); <br />
		|  <br />
		| ИД - Текст;<br />
		| ИНН - Текст; <br />
		| Наименование - Текст; <br />
		| ПометкаУдаления - число;<br />
		| lat  - Текст;<br />
		| lon - Текст; <br />
		| <br />
		| <br />
		|
		| Запрос.УстановитьТелоИзСтроки(XMLСтрока(Новый ХранилищеЗначения(Стк, Новый СжатиеДанных(3)))
		|
		| <br />
		| <br />
		| Возврат 200 если метод отработал успешно
		|
		|
		|</BODY>
		|</HTML>	
		|
		|";
	КонецЕСЛИ;
	
	
	рез = глВыгрузкаДанных.ЗаписатьГараж(Стк);
	Если Рез=Истина ТОгда
		Возврат "Данные записаны. ";
	ИНаче
		КодСостояния = 410;
		Возврат рез;
	КонецесЛИ;
	
КонецФункции

Функция ТестТбл()
	
	
	ТБл = Новый ТаблицаЗначений;
	Тбл.Колонки.Добавить("dt");
	ТБл.Колонки.Добавить("Name");
	ТБл.Колонки.Добавить("Kol");
	
	Новстр = Тбл.Добавить();
	НовСтр.dt = ТекущаяДата();
	Новстр.Name = "ТестИмя1";
	НовСтр.Kol = 777;
	
	Новстр = Тбл.Добавить();
	НовСтр.dt = ТекущаяДата();
	Новстр.Name = "ТестИмя2";
	НовСтр.Kol = 333;
	
	Новстр = Тбл.Добавить();
	НовСтр.dt = ТекущаяДата();
	Новстр.Name = "ТестИмя3";
	НовСтр.Kol = 111;
	
	
	
	Таб = новый ТабличныйДокумент;
	а=0;
	Для каждого Кол из Тбл.Колонки Цикл
		а=а+1;
		Таб.область(1,а,1,а).Текст = Кол.Имя;
	КонецЦикла;
	
	нс=1;
	Для каждого Стр из Тбл Цикл
		нс=нс+1;
		а=0;
		Для каждого Кол из Тбл.Колонки Цикл
			а=а+1;
			Таб.область(нс,а,нс,а).Текст = стр[Кол.Имя];
		КонецЦикла;
		
		
	КонецЦикла;
	
	ПотокФайла = Новый ПотокВПамяти();
	Таб.Записать(ПотокФайла,ТипФайлаТабличногоДокумента.TXT);
	//Здесь ПотокФайла.Размер() больше нуля, т.е. все в порядке.
	ДвоичныеДанныеФайла = ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();
		
	
	Возврат ДвоичныеДанныеФайла;
	
	
	
	
	
	
	СтрКол = "";
	Для каждого Кол из Тбл.Колонки Цикл
		СтрКол = СтрКол + ","+Кол.Имя;
	КонецЦикла;
	СтрКол = Сред(СтрКол,2);
	
	Мас = новый Массив;
	Для каждого Стр из ТБл Цикл
		Стк = Новый Структура(СтрКол);
		ЗаполнитьЗначенияСвойств(Стк,Стр);
		МАс.Добавить(Стк);
	КонецциклА;
	
	
	Запись = Новый ЗаписьJSON;
	Запись.УстановитьСтроку();
	
	ЗаписатьJSON(Запись,Мас);
	
	Возврат Запись.Закрыть();
	
КонецФункции

Функция ОбновитьДанныеПрозрачность(СткПар)
	инн=Неопределено;
	СткПар.Свойство("inn",инн);
	Если Инн<>Неопределено ТОгда
		глВыгрузкаДанных.ДанныеПрозрачность(Инн);
		Возврат "Обновлены данные по ИНН "+ИНН+". Обновить отчет в Power BI";
	ИНАче
		глВыгрузкаДанных.ЗагрузитьПроектПрозрачность();
		Возврат "Обновлены данные по всем ДО. Обновить отчет в Power BI";
	КонецЕСЛИ;
		
КонецФункции

Функция СогласованиеПРЗ(Стк)
	                                     
	 
	Соединение = Новый HTTPСоединение(
	"api1c.nvds.ru", // сервер (хост)
	8088, // порт, по умолчанию для http используется 80, для https 443
	"SERV", // пользователь для доступа к серверу (если он есть)
	"SERVgfhjkm", // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	// защищенное соединение, если используется https
	);
	
	тЗапрос = "ENT/hs/entAPI/ACCEPTTASK?ind=0";
	ДЛя каждого эл из Стк Цикл
		тЗапрос=тЗапрос +"&"+эл.ключ+"="+Эл.Значение;
	Конеццикла;
	
	
	Запрос = Новый HTTPЗапрос(тЗапрос);
	Рез = Соединение.GET(Запрос);
	
	
	тхт = новый ТекстовыйДокумент;
	тхт.УстановитьТекст(Рез.ПолучитьТелоКакСтроку());
		тхт.Записать("D:\1.txt");
		
	Возврат Рез.ПолучитьТелоКакСтроку();
	
КонецФункции

Функция ПоложитьФайлВАЗУР(Запрос)
	
	Стк = XMLзначение(Тип("ХранилищеЗначения"),Запрос.ПолучитьТелоКакСтроку()).Получить();
	комм = "";
	рез = глViber.ПередатьФайлВХранилищеАЗУР(стк.контейнер,стк.каталог,Стк.имя,Стк.дд,Стк.рсш,комм);
	Если Рез<>ЛОжь Тогда
		Возврат Рез;
	ИНАче
		Возврат Комм;
	КонецеСЛИ;
	
КонецФункции

Функция ПолучитьСкладыПоПланшету(Тело)
	
	
	Соо = XMLЗначение(Тип("ХранилищеЗначения"),Тело).Получить();
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	""Склады"" КАК ВидСпр,
	               |	СпрСкл.Ссылка КАК GUID,
	               |	СпрСкл.ЭтоГруппа КАК ЭтоГруппа,
	               |	СпрСкл.ПометкаУдаления КАК ПометкаУдаления,
	               |	СпрСкл.Наименование КАК Наименование,
	               |	СпрСкл.Код КАК Код,
	               |	СпрСкл.Организация.Код КАК ОрганизацияINN
	               |ИЗ
	               |	Справочник.Склады КАК СпрСкл
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Планшеты.Склады КАК ПланшетыСклады
	               |		ПО ПланшетыСклады.Склад = СпрСкл.Ссылка и ПланшетыСклады.ссылка = &ссПлш ";
	Запрос.УстановитьПараметр("ссПлш",Справочники.Планшеты.ПолучитьСсылку(Новый УникальныйИдентификатор(Соо.получить("ИдУстройства"))));
	
	Т1 = Запрос.Выполнить().Выгрузить();
	
	Т2 = глВыгрузкаДанных.ДанныеОРГ(Т1.ВыгрузитьКолонку("ОрганизацияINN"));
	
	тблФорматGUID(Т2);
	
	Возврат	ЗаписатьХранилищеВСтроку(Т1,Неопределено,Т2);
	
	
КонецФункции

Функция GETGET(Запрос)
	Ответ = Новый HTTPСервисОтвет(200);
	Метод = ВРЕГ(Запрос.ПараметрыURL["ИмяМетода"]);
	
	СткПар = Новый Структура;
	
	Для каждого Эл из Запрос.ПараметрыЗапроса Цикл
		СткПар.Вставить(Эл.Ключ,Эл.Значение);	
	КонецЦикла;
	
	Если Метод = "MSG" Тогда
		Результат = ОтправитьGOOGLEMESSSAGE(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИначеЕсли Метод = "ALLORG" Тогда
		Результат = ДанныеОРГ(СткПар);
	ИначеЕсли Метод = "ALLORGHTML" Тогда
		Результат = ДанныеОРГhtml(СткПар);
		//Ответ.УстановитьТелоИзДвоичныхДанных(Результат);
		//Возврат Ответ;
	ИНачеЕсли Метод = "AGROIL" Тогда
		Результат = ПолучитьТБлМасло(СткПар);
	ИНачеЕсли Метод = "REF" Тогда
		Результат = ДанныеСпр(СткПар);
	ИНачеЕсли Метод = "SYNC" Тогда
		Результат = ЗаписатьСпр(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);	
	ИНачеЕсли Метод = "NEWNOM" Тогда
		Результат = ЗаписатьЗапросНаНовуюНомен(Запрос,Ответ.КодСостояния);	
	ИначеЕсли Метод = "IDPUSH" Тогда
		Результат = ЗаписатьИдДевайс(Запрос.ПолучитьТелоКакСтроку());
	ИначеЕсли Метод = "MESSAGE" Тогда
		Результат = Почта_WHATSAPP(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИначеЕсли Метод = "SENDMAIL" Тогда
		Результат = ПереслатьПочту(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "RECOG" ТОгда 
		Результат = РаботаABBYY.СоздатьЗапрос(СткПар,Запрос.ПолучитьТелоКакДвоичныеДанные(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "IDDEV" ТОгда 
		Результат = ИдДевайса(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "GETIDDEV" ТОгда 
		Результат = GETИдДевайса(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "TEST" Тогда
		Результат = "Test complete";
	ИНачеЕсли Метод = "VIBERHOOK" Тогда
		ЗаписатьТелоViber(Запрос.ПолучитьТелоКакСтроку());
		Результат = "Request Ok.";
	ИНачеЕсли Метод = "JIRAHOOK" Тогда
		ЗаписатьТелоViber(Запрос.ПолучитьТелоКакСтроку());
		Результат = "Request Ok.";
	ИНачеЕсли Метод = "ERRLOG" Тогда
		Результат = ЗаписатьЕрЛОГ(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "TEST" Тогда
		Результат = "Request Ok.";
	ИНачеЕсли Метод = "ALISA1" Тогда
		Результат = глАлиса.АЛГА(Запрос.ПолучитьТелоКакСтроку());
	ИНачеЕсли Метод = "PUTGAR" Тогда
		Результат = ЗаписатьГараж(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИНачеЕсли Метод = "GETGAR" Тогда
		Результат = ДанныеГараж();
	ИНачеЕсли Метод = "GETWAREHOUSES" Тогда
		Результат = ПолучитьСкладыПоПланшету(Запрос.ПолучитьТелоКакСтроку());
	ИНачеЕсли Метод = "ACCEPTTASKENT" Тогда
		Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8"); // "text/html; charset=UTF-8"
		Результат = СогласованиеПРЗ(СткПар);
	ИНачеЕсли Метод = "TBL" Тогда
		Результат = ТестТбл();
		Ответ.УстановитьТелоИзДвоичныхДанных(Результат);
		Возврат Ответ;
	ИНачеЕсли Метод = "PUTFILETOAZURE" Тогда
		Результат = ПоложитьФайлВАЗУР(Запрос);
	ИНачеЕсли Метод = "REFRESHPROZRACH" Тогда
		Результат = ОбновитьДанныеПрозрачность(СткПар);
	ИначеЕсли Метод = "RECOGNIZETSMAIL" Тогда
		Результат = РаспознатьНомерМэйл(Запрос.ПолучитьТелоКакСтроку(),СткПар);
	ИначеЕсли Метод = "RECOGNIZETSTEXT" Тогда
		Результат = ВыполнитьПоискТСПоНомеру(Запрос.ПолучитьТелоКакСтроку());
	ИначеЕсли Метод = "GETOUTDOCPHOTO" Тогда
		Результат = ПолучитьФотографииПоВыбытию(Запрос.ПолучитьТелоКакСтроку(), СткПар, Ответ);
	ИначеЕсли Метод = "GETCARCHANGES" Тогда
		Результат = ПолучитьПриемкиТС(Запрос.ПолучитьТелоКакСтроку());
	//кроссы номенклатуры
	ИначеЕсли Метод = "CRBRAND" Тогда
		Ответ.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8"); // "text/html; charset=UTF-8"
		Результат = глКросАПИ.Запрос1бренды(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИначеЕсли Метод = "CRITEMS" Тогда
		Результат = глКросАПИ.Запрос2Аналоги(Запрос.ПолучитьТелоКакСтроку(),Ответ.КодСостояния);
	ИначеЕсли Метод = "OSTEDSKLAD" Тогда
		Результат = глВыгрузкаДанных.ПолучитьОстаткиЕдСкладПоНом(Запрос.ПолучитьТелоКакСтроку());
	ИначеЕсли Метод = "OSTEDSKLADREGION" Тогда
		Результат = глВыгрузкаДанных.ПолучитьОстаткиЕдСкладПоНомИРегионамЛокации(Запрос.ПолучитьТелоКакСтроку());
	ИначеЕсли Метод = "GETNAMETABLESQL" Тогда
		Результат = ПолучитьИмяТаблицыSQL(Запрос.ПолучитьТелоКакСтроку());
	ИНаче
		Ответ.КодСостояния = 404;
		Результат = "Метод "+Метод+" не обнаружен";
	КонецеСли;
	
	Ответ.УстановитьТелоИзСтроки(Результат);
	Возврат Ответ;
КонецФункции

Функция ПолучитьПриемкиТС(пТело)
	мСтруктура = XMLзначение(Тип("ХранилищеЗначения"), пТело).Получить();
	мГаражныйНомер = мСтруктура.ГарНомер;
	мИНН = мСтруктура.ИНН;
	
	мСтруктураЗаписей = Новый Структура("TabNom, ChangeStatus, comment, dt", "ТабельныйНомер", "Статус", "Комментарий", "Дата");
	мТекстПрямогоЗапроса = "
	|SELECT
	|  TabNom,
	|  ChangeStatus,
	|  comment,
	|  dt
	|
	|FROM SVOD.dbo.CarChange
	|
	|WHERE inn = N'" + мИНН + "' AND GarNom = N'" + мГаражныйНомер + "'";
	
	мРезультатПрямогоЗапроса = НайтиДанныеВАзуре(мТекстПрямогоЗапроса, мСтруктураЗаписей);
	Если мРезультатПрямогоЗапроса.Количество() = 1 Тогда
		вСообщение = "Найдено успешно";
		вРезультат = мРезультатПрямогоЗапроса[0];	//уже структура
	ИначеЕсли мРезультатПрямогоЗапроса.Количество() > 1 Тогда
			вСообщение = "Несколько ТС!";
			вРезультат = мРезультатПрямогоЗапроса;
	Иначе
		вСообщение = "Не найдено";
		вРезультат = Неопределено;
	КонецЕсли;
	вСтруктура = Новый Структура("Сообщение, Результат", вСообщение, вРезультат);
	вХранилище = Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5));
	Возврат XMLСтрока(вХранилище);
КонецФункции

Функция ВыполнитьПоискТСПоНомеру(пТело)
	мСтрокаНомера = XMLзначение(Тип("ХранилищеЗначения"), пТело).Получить();
	вСтруктура = НайтиТСПоНомеру(мСтрокаНомера);
	вХранилище = Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5));
	Возврат XMLСтрока(вХранилище);
КонецФункции

Функция НайтиТСПоНомеру(пСтрокаНомера)
	//мГосударственныйНомерТС = СтрЗаменить(СтрЗаменить(глОбщий.ЗаменаСимволов(ВРег(СокрЛП(пСтрокаНомера)),"ABCEHKMOPTXY","АВСЕНКМОРТХУ"), " ", ""),"'","");
	мГосударственныйНомерТС = пСтрокаНомера;
	мДлинаНомера = СтрДлина(мГосударственныйНомерТС);
	Если мДлинаНомера > 9 Или мДлинаНомера < 2 Тогда
		вСтруктура = Новый Структура("Сообщение, Результат", "Too small or too big", мГосударственныйНомерТС);
		Возврат вСтруктура;
	Иначе
		мСтруктураЗаписей = Новый Структура("CodeOrg, GarNom", "ИНН", "ГарНомер");
		мТекстПрямогоЗапроса = "
		|SELECT top 1
		|  CodeOrg,
		|  GarNom
		|
		|FROM SVOD.dbo.Prozrachnost
		|
		|WHERE GosNom = N'" + мГосударственныйНомерТС + "' OR GarNom = N'" + мГосударственныйНомерТС + "'";
		
		мРезультатПрямогоЗапроса = НайтиДанныеВАзуре(мТекстПрямогоЗапроса, мСтруктураЗаписей, Истина);
		Если мРезультатПрямогоЗапроса.Количество() = 1 Тогда
			вСообщение = "Найдено успешно";
			вРезультат = мРезультатПрямогоЗапроса[0];	//уже структура
		ИначеЕсли мРезультатПрямогоЗапроса.Количество() > 1 Тогда
			вСообщение = "Несколько ТС!";
			вРезультат = мРезультатПрямогоЗапроса;
		Иначе
			вСообщение = "Не найдено";
			вРезультат = Новый Структура("Ошибка", "Не найден собственник ТС с госномером: " + мГосударственныйНомерТС);
		КонецЕсли;
	КонецЕсли;
	вСтруктура = Новый Структура("Сообщение, Результат", вСообщение, вРезультат);
	
	Возврат вСтруктура;
КонецФункции

Функция ФорматГосНомер(мДанныеРаспознавания)
	рез = глОбщий.ЗаменаСимволов(ВРег(СокрЛП(мДанныеРаспознавания)),"ABCEHKMOPTXY","АВСЕНКМОРТХУ");
	рез = СтрЗаменить(рез, " ", "");
	рез = СтрЗаменить(рез, "'", "");
	рез = СтрЗаменить(рез, "-", "");
	
	Возврат Рез;
КонецФункции

//имя метода: “RECOGNIZETSMAIL”
//в теле POST-запроса - двоичные данные файла картинки
//	опционально учитвается URI-параметр “onlynumber”. 
//Возвращаемые значения:
//- В случае успешного распознавания:
//	* при наличии параметра onlynumber - структура {“Номер”, мРезультатРаспознавания}, госномер кириллическими символами.
//	* если параметра нет - ищет данные ТС по базе всех ТС (SVOD.dbo.Prozrachnost) , возвращает ИНН организации-владельца ТС, Гаражный номер ТС в виде структуры: {“ИНН, ГарНомер“, мИНН, мГарНОмер};
//- В случае ошибки на любом этапе (распознавание, поиск владельца) - структура {“Ошибка”, мТекстОшибки};
Функция РаспознатьНомерМэйл(пТело,СткПар)
	мДвоичныеДанные = XMLзначение(Тип("ХранилищеЗначения"), пТело).Получить();
	мДанныеРаспознавания = ОтправитьНаОбработкуМэйл(мДвоичныеДанные);
	Если ТипЗнч(мДанныеРаспознавания) = Тип("Строка") Тогда
		мДанныеРаспознавания = ФорматГосНомер(мДанныеРаспознавания);
		вСтруктура = Новый Структура("Номер", мДанныеРаспознавания);
		Если СткПар.свойство("onlynumber") = Ложь Тогда
			мДанныеПоискаТС = НайтиТСПоНомеру(мДанныеРаспознавания);
			вСтруктура.Вставить("ДанныеТС", мДанныеПоискаТС);
		КонецЕсли;
	Иначе
		вСтруктура = мДанныеРаспознавания;
	КонецЕсли;
	вХранилище = Новый ХранилищеЗначения(вСтруктура, Новый СжатиеДанных(5));
	Возврат XMLСтрока(вХранилище);
КонецФункции

Функция ПолучитьИмяТаблицыSQL(Тело)
	
	//Srvr="192.168.40.9";Ref="URALS_BUH";
	Стр = СтрЗаменить(Тело,";",символы.ПС);
	Стр = СтрЗаменить(Стр,"=",символы.ПС);
	Стр = СтрЗаменить(Стр,"""","");
	Стк = новый Структура();
	Стк.Вставить("Сервер",СтрПолучитьСтроку(стр,2));
	Стк.Вставить("База",НРЕГ(СтрПолучитьСтроку(стр,4)));
	
	Тбл = глВыгрузкаДанных.ДанныеОРГ();
	
	Для каждого стр из Тбл Цикл
		Если стр.ВнутреннийАдрес = Стк.Сервер
			и НРЕГ(Стр.APIrest) = Стк.База Тогда
			
			Возврат "nomReceipPrh";
			
		КонецесЛИ;
	Конеццикла;
	
	Возврат "База не найдена. "+Стк.Сервер+" / "+Стк.база; 
	
КонецФункции


Функция ОтправитьНаОбработкуМэйл(пДвоичныеДанные)
	мРазделитель = "WebKitFormBoundary3MA5YWxkTrZu1gW";
	
	Соединение = Новый HTTPСоединение(
	"smarty.mail.ru", // сервер (хост)
	443, // порт, по умолчанию для http используется 80, для https 443
	, // пользователь для доступа к серверу (если он есть)
	, // пароль для доступа к серверу (если он есть)
	, // здесь указывается прокси, если он есть
	, // таймаут в секундах, 0 или пусто - не устанавливать
	Новый ЗащищенноеСоединениеOpenSSL// защищенное соединение, если используется https
	);
	
	Запрос = Новый HTTPЗапрос("/api/v1/objects/detect?oauth_provider=mcs&oauth_token=tsY3TTADxfYaqAMLNK9HiB5ZrH7YXnVPxCsBNp2XiMKCFJSkc");
	Запрос.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + мРазделитель);
	
	мПоток = Новый ПотокВПамяти;
	мЗаписьДанных = Новый ЗаписьДанных(мПоток);
	
	мЗаписьДанных.ЗаписатьСтроку("--" + мРазделитель);
	мЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""file_0""; filename=""file_0""");
	мЗаписьДанных.ЗаписатьСтроку("");
	мЗаписьДанных.Записать(пДвоичныеДанные);
	мЗаписьДанных.ЗаписатьСтроку("");
	
	мЗаписьДанных.ЗаписатьСтроку("--" + мРазделитель);
	мЗаписьДанных.ЗаписатьСтроку("Content-Disposition: form-data; name=""meta""");
	мЗаписьДанных.ЗаписатьСтроку("");
	мЗаписьДанных.ЗаписатьСтроку("{""mode"":[""car_number""],""images"":[{""name"":""file_0""}]}");
	мЗаписьДанных.ЗаписатьСтроку("");
	
	мЗаписьДанных.ЗаписатьСтроку("--" + мРазделитель + "--");
	
	мРазмерСодержимого = XMLСтрока(мПоток.Размер());
	мЗаписьДанных.Закрыть();
	
	мДвоичныеДанныеТела = мПоток.ЗакрытьИПолучитьДвоичныеДанные();
	Запрос.УстановитьТелоИзДвоичныхДанных(мДвоичныеДанныеТела);
	Запрос.Заголовки.Вставить("Content-length", мРазмерСодержимого);
	
	Результат = Соединение.POST(Запрос);
	Если Результат.КодСостояния <> 200 Тогда
		Рез = результат.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	мТелоОтветаСтрокой = результат.ПолучитьТелоКакСтроку();
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(мТелоОтветаСтрокой);
	мДанныеОтвета = ПрочитатьJSON(Чтение, Истина);
	Если мДанныеОтвета["status"] = 200 Тогда
		мРезультатНомер = "";
		мТелоОтвета = мДанныеОтвета["body"];
		мМассивНомеров = мТелоОтвета["car_number_labels"];
		мПервыйНомер = мМассивНомеров[0];
		мМассивГосНомеровПервогоНомера = мПервыйНомер["labels"];
		мГосНомерПервогоНомера = мМассивГосНомеровПервогоНомера[0];
		мРезультатНомер = мГосНомерПервогоНомера["rus"];	//или просто мДанныеОтвета["body"] а там дальше парсить
		Возврат мРезультатНомер;
	Иначе
		Возврат Новый Структура("Ошибка", мТелоОтветаСтрокой);
	КонецЕсли;
КонецФункции

Функция НайтиДанныеВАзуре(пТекстЗапроса, пСтруктураЗаписей, пТолькоПерваяЗапись = Ложь)
	мСоединениеАзур = глОбщий.ПолучитьСоединениеAZURESQL();
	мНаборЗаписей = Новый ComObject("ADODB.RecordSet");
	мНаборЗаписей.Open(пТекстЗапроса, мСоединениеАзур);
	
	мРезультат = Новый Массив;
	Пока мНаборЗаписей.EOF() = 0 Цикл
		мСтруктура = Новый Структура;
		Для Каждого мПоле Из пСтруктураЗаписей Цикл
			Если мПоле.Значение = "Дата" Тогда
				мЗначениеПоля = мНаборЗаписей.Fields(мПоле.Ключ).Value;
			Иначе
				мЗначениеПоля = СокрЛП(мНаборЗаписей.Fields(мПоле.Ключ).Value);
			КонецЕсли;
			мСтруктура.Вставить(мПоле.Значение, мЗначениеПоля);
		КонецЦикла;	
		мРезультат.Добавить(мСтруктура);
		Если пТолькоПерваяЗапись Тогда
			Прервать;
		КонецЕсли;
		мНаборЗаписей.MoveNext();
	КонецЦикла;
	
	мНаборЗаписей.Close();
	мСоединениеАзур.Close();
	
	Возврат мРезультат;
КонецФункции

Функция ПолучитьФотографииПоВыбытию(пТело, пСтруктураПараметров, пОтвет)
	пОтвет.Заголовки.Вставить("Content-Type","text/html; charset=UTF-8");
	Если НЕ(пСтруктураПараметров.СВойство("INN") И пСтруктураПараметров.СВойство("ID")) Тогда
		Возврат "Проверьте наличие обязательных параметров URI: INN, ID";
	КонецЕсли;
	мТаблицаОрганизаций = глВыгрузкаДанных.ДанныеОРГ();
	мСтрокаОрганизации = мТаблицаОрганизаций.Найти(пСтруктураПараметров.INN, "Код");
	Если мСтрокаОрганизации = Неопределено Тогда
		Возврат "Не найдена организация с ИНН:" + пСтруктураПараметров.INN;
	КонецЕсли;
	
	Если СокрЛП(мСтрокаОрганизации.ВнешнийАдресENT)="" Тогда
		мАдрес = мСтрокаОрганизации.ВнешнийАдрес;
	ИНАче
		мАдрес = мСтрокаОрганизации.ВнешнийАдресENT;
	КонецЕСЛИ;
	мПорт = 80;
	мПозицияПортВАдресе = СтрНайти(мАдрес, ":");
	Если мПозицияПортВАдресе <> 0 Тогда
		мМультиСтрока = СтрЗаменить(мАдрес, ":", Символы.ПС);
		мАдрес = СокрлП(СтрПолучитьСтроку(мМультиСтрока, 1));
		мПорт = Число(глВыгрузкаДанных.фрмТолькоЧисла(СТрПолучитьСтроку(мМультиСтрока, 2)));
	КонецеСЛИ;
	мИмяПубликации = мСтрокаОрганизации.apiRestENT;	
	мСоединение = Новый HTTPСоединение(мАдрес, мПорт, "SERV", "SERVgfhjkm");
	мЗапрос = Новый HTTPЗапрос("/" + мИмяПубликации + "/hs/flowAPI/OUTDOCPHOTO?ID=" + пСтруктураПараметров.ID);
	мОтвет = мСоединение.ОтправитьДляОбработки(мЗапрос);
	Если мОтвет.КодСостояния <> 200 Тогда
		Возврат "Не удалось получить результат OUTDOCPHOTO?ID=" + пСтруктураПараметров.ID + ";" + мОтвет.ПолучитьТелоКакСтроку() ;
	КонецЕсли;
	Возврат мОтвет.ПолучитьТелоКакСтроку();
КонецФункции